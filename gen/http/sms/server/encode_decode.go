// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeDeliveryReportResponse returns an encoder for responses returned by
// the sms deliveryReport endpoint.
func EncodeDeliveryReportResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeDeliveryReportRequest returns a decoder for requests sent to the sms
// deliveryReport endpoint.
func DecodeDeliveryReportRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeliveryReportRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeliveryReportRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeliveryReport1(&body)

		return payload, nil
	}
}

// EncodeIncomingMessageResponse returns an encoder for responses returned by
// the sms incomingMessage endpoint.
func EncodeIncomingMessageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeIncomingMessageRequest returns a decoder for requests sent to the sms
// incomingMessage endpoint.
func DecodeIncomingMessageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body IncomingMessageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateIncomingMessageRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewIncomingMessage1(&body)

		return payload, nil
	}
}

// EncodeBulkSMSOptOutResponse returns an encoder for responses returned by the
// sms bulkSMSOptOut endpoint.
func EncodeBulkSMSOptOutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeBulkSMSOptOutRequest returns a decoder for requests sent to the sms
// bulkSMSOptOut endpoint.
func DecodeBulkSMSOptOutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BulkSMSOptOutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewBulkSMSOptOut1(&body)

		return payload, nil
	}
}

// EncodeSubNotifierResponse returns an encoder for responses returned by the
// sms subNotifier endpoint.
func EncodeSubNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeSubNotifierRequest returns a decoder for requests sent to the sms
// subNotifier endpoint.
func DecodeSubNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SubNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSubNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSubNotifierSubscriptionNotification(&body)

		return payload, nil
	}
}
