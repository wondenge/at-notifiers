// Code generated by goa v3.1.3, DO NOT EDIT.
//
// voice HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"encoding/json"
	"fmt"

	voice "github.com/wondenge/at-notifiers/gen/voice"
)

// BuildVoiceNotifierPayload builds the payload for the voice voiceNotifier
// endpoint from CLI flags.
func BuildVoiceNotifierPayload(voiceVoiceNotifierBody string) (*voice.VoiceNotification, error) {
	var err error
	var body VoiceNotifierRequestBody
	{
		err = json.Unmarshal([]byte(voiceVoiceNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Optio alias iure est.\",\n      \"callSessionState\": \"Qui reiciendis in sed consequatur eos.\",\n      \"callStartTime\": \"Saepe veniam.\",\n      \"callerCountryCode\": \"Deserunt velit praesentium quos id repellat.\",\n      \"callerNumber\": \"+254711XXXYYY\",\n      \"currencyCode\": \"Suscipit deleniti beatae.\",\n      \"destinationNumber\": \"+254711XXXYYY\",\n      \"dialDestinationNumber\": \"Repellendus est suscipit aperiam in aut.\",\n      \"dialDurationInSeconds\": \"Magnam dolores nihil eligendi perspiciatis dolore.\",\n      \"dialStartTime\": \"Aspernatur est ut doloribus architecto est.\",\n      \"direction\": \"Sunt vero totam sint qui.\",\n      \"dtmfDigits\": \"Ut assumenda dignissimos cupiditate eius illo qui.\",\n      \"durationInSeconds\": \"Quibusdam optio facilis accusantium assumenda eum nemo.\",\n      \"hangupCause\": \"SERVICE_UNAVAILABLE\",\n      \"isActive\": \"Voluptas fugiat sed numquam iure.\",\n      \"recordingUrl\": \"Enim beatae ut velit porro.\",\n      \"sessionId\": \"Nobis nostrum et quaerat quaerat accusantium earum.\"\n   }'")
		}
	}
	v := &voice.VoiceNotification{
		IsActive:              body.IsActive,
		SessionID:             body.SessionID,
		Direction:             body.Direction,
		DestinationNumber:     body.DestinationNumber,
		CallerNumber:          body.CallerNumber,
		CallerCountryCode:     body.CallerCountryCode,
		CallStartTime:         body.CallStartTime,
		DtmfDigits:            body.DtmfDigits,
		RecordingURL:          body.RecordingURL,
		DurationInSeconds:     body.DurationInSeconds,
		CurrencyCode:          body.CurrencyCode,
		Amount:                body.Amount,
		CallSessionState:      body.CallSessionState,
		DialDestinationNumber: body.DialDestinationNumber,
		DialDurationInSeconds: body.DialDurationInSeconds,
		DialStartTime:         body.DialStartTime,
		HangupCause:           body.HangupCause,
	}

	return v, nil
}

// BuildTransferEventsPayload builds the payload for the voice transferEvents
// endpoint from CLI flags.
func BuildTransferEventsPayload(voiceTransferEventsBody string) (*voice.CallTransferEvent, error) {
	var err error
	var body TransferEventsRequestBody
	{
		err = json.Unmarshal([]byte(voiceTransferEventsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callSessionState\": \"Transferred\",\n      \"callTransferHangupCause\": \"InvalidPhoneNumber\",\n      \"callTransferParam\": \"Unde quos mollitia.\",\n      \"callTransferState\": \" Active\",\n      \"callTransferredToNumber\": \"Doloremque velit repellendus perferendis tempora veritatis quidem.\",\n      \"isActive\": \"1\",\n      \"status\": \"Success\"\n   }'")
		}
	}
	v := &voice.CallTransferEvent{
		CallSessionState:        body.CallSessionState,
		IsActive:                body.IsActive,
		Status:                  body.Status,
		CallTransferParam:       body.CallTransferParam,
		CallTransferredToNumber: body.CallTransferredToNumber,
		CallTransferState:       body.CallTransferState,
		CallTransferHangupCause: body.CallTransferHangupCause,
	}

	return v, nil
}
