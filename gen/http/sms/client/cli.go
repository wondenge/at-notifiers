// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"encoding/json"
	"fmt"

	sms "github.com/wondenge/at-notifiers/gen/sms"
)

// BuildDeliveryReportPayload builds the payload for the sms deliveryReport
// endpoint from CLI flags.
func BuildDeliveryReportPayload(smsDeliveryReportBody string) (*sms.DeliveryReport1, error) {
	var err error
	var body DeliveryReportRequestBody
	{
		err = json.Unmarshal([]byte(smsDeliveryReportBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"failureReason\": \"UserAccountSuspended\",\n      \"id\": \"Consequatur et dicta.\",\n      \"networkCode\": \"64110\",\n      \"phoneNumber\": \"Recusandae perspiciatis excepturi reiciendis est quasi est.\",\n      \"retryCount\": \"Non quo omnis consequatur vero.\",\n      \"status\": \"Buffered\"\n   }'")
		}
	}
	v := &sms.DeliveryReport1{
		ID:            body.ID,
		Status:        body.Status,
		PhoneNumber:   body.PhoneNumber,
		NetworkCode:   body.NetworkCode,
		FailureReason: body.FailureReason,
		RetryCount:    body.RetryCount,
	}

	return v, nil
}

// BuildIncomingMessagePayload builds the payload for the sms incomingMessage
// endpoint from CLI flags.
func BuildIncomingMessagePayload(smsIncomingMessageBody string) (*sms.IncomingMessage1, error) {
	var err error
	var body IncomingMessageRequestBody
	{
		err = json.Unmarshal([]byte(smsIncomingMessageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"date\": \"1977-01-31\",\n      \"from\": \"Velit earum est.\",\n      \"id\": \"Illo voluptate iste voluptate unde.\",\n      \"linkId\": \"Vitae autem adipisci sed labore reprehenderit est.\",\n      \"networkCode\": \"64007\",\n      \"text\": \"Aut quas quia laboriosam vitae dolor hic.\",\n      \"to\": \"Eligendi suscipit recusandae libero natus cupiditate libero.\"\n   }'")
		}
	}
	v := &sms.IncomingMessage1{
		Date:        body.Date,
		From:        body.From,
		ID:          body.ID,
		LinkID:      body.LinkID,
		Text:        body.Text,
		To:          body.To,
		NetworkCode: body.NetworkCode,
	}

	return v, nil
}

// BuildBulkSMSOptOutPayload builds the payload for the sms bulkSMSOptOut
// endpoint from CLI flags.
func BuildBulkSMSOptOutPayload(smsBulkSMSOptOutBody string) (*sms.BulkSMSOptOut1, error) {
	var err error
	var body BulkSMSOptOutRequestBody
	{
		err = json.Unmarshal([]byte(smsBulkSMSOptOutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumber\": \"Ut vitae sit.\",\n      \"senderId\": \"Enim neque.\"\n   }'")
		}
	}
	v := &sms.BulkSMSOptOut1{
		SenderID:    body.SenderID,
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildSubNotifierPayload builds the payload for the sms subNotifier endpoint
// from CLI flags.
func BuildSubNotifierPayload(smsSubNotifierBody string) (*sms.SubscriptionNotification, error) {
	var err error
	var body SubNotifierRequestBody
	{
		err = json.Unmarshal([]byte(smsSubNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"Magni molestiae molestiae esse.\",\n      \"phoneNumber\": \"Ut perferendis sit ratione expedita.\",\n      \"shortCode\": \"Pariatur aut omnis.\",\n      \"updateType\": \"deletion\"\n   }'")
		}
	}
	v := &sms.SubscriptionNotification{
		PhoneNumber: body.PhoneNumber,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		UpdateType:  body.UpdateType,
	}

	return v, nil
}
