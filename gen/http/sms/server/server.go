// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP server
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	sms "github.com/wondenge/at-notifiers/gen/sms"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the sms service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	DeliveryReport  http.Handler
	IncomingMessage http.Handler
	BulkSMSOptOut   http.Handler
	SubNotifier     http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the sms service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *sms.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"DeliveryReport", "POST", "/callbacks/africastalking/sms/deliveryreport"},
			{"IncomingMessage", "POST", "/callbacks/africastalking/sms/incomingmessage"},
			{"BulkSMSOptOut", "POST", "/callbacks/africastalking/sms/bulksmsoptout"},
			{"SubNotifier", "POST", "/callbacks/africastalking/sms/subscription"},
		},
		DeliveryReport:  NewDeliveryReportHandler(e.DeliveryReport, mux, decoder, encoder, errhandler, formatter),
		IncomingMessage: NewIncomingMessageHandler(e.IncomingMessage, mux, decoder, encoder, errhandler, formatter),
		BulkSMSOptOut:   NewBulkSMSOptOutHandler(e.BulkSMSOptOut, mux, decoder, encoder, errhandler, formatter),
		SubNotifier:     NewSubNotifierHandler(e.SubNotifier, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "sms" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.DeliveryReport = m(s.DeliveryReport)
	s.IncomingMessage = m(s.IncomingMessage)
	s.BulkSMSOptOut = m(s.BulkSMSOptOut)
	s.SubNotifier = m(s.SubNotifier)
}

// Mount configures the mux to serve the sms endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountDeliveryReportHandler(mux, h.DeliveryReport)
	MountIncomingMessageHandler(mux, h.IncomingMessage)
	MountBulkSMSOptOutHandler(mux, h.BulkSMSOptOut)
	MountSubNotifierHandler(mux, h.SubNotifier)
}

// MountDeliveryReportHandler configures the mux to serve the "sms" service
// "deliveryReport" endpoint.
func MountDeliveryReportHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/deliveryreport", f)
}

// NewDeliveryReportHandler creates a HTTP handler which loads the HTTP request
// and calls the "sms" service "deliveryReport" endpoint.
func NewDeliveryReportHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeliveryReportRequest(mux, decoder)
		encodeResponse = EncodeDeliveryReportResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deliveryReport")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sms")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIncomingMessageHandler configures the mux to serve the "sms" service
// "incomingMessage" endpoint.
func MountIncomingMessageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/incomingmessage", f)
}

// NewIncomingMessageHandler creates a HTTP handler which loads the HTTP
// request and calls the "sms" service "incomingMessage" endpoint.
func NewIncomingMessageHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIncomingMessageRequest(mux, decoder)
		encodeResponse = EncodeIncomingMessageResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "incomingMessage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sms")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBulkSMSOptOutHandler configures the mux to serve the "sms" service
// "bulkSMSOptOut" endpoint.
func MountBulkSMSOptOutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/bulksmsoptout", f)
}

// NewBulkSMSOptOutHandler creates a HTTP handler which loads the HTTP request
// and calls the "sms" service "bulkSMSOptOut" endpoint.
func NewBulkSMSOptOutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBulkSMSOptOutRequest(mux, decoder)
		encodeResponse = EncodeBulkSMSOptOutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "bulkSMSOptOut")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sms")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSubNotifierHandler configures the mux to serve the "sms" service
// "subNotifier" endpoint.
func MountSubNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/subscription", f)
}

// NewSubNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "sms" service "subNotifier" endpoint.
func NewSubNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSubNotifierRequest(mux, decoder)
		encodeResponse = EncodeSubNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "subNotifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sms")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
