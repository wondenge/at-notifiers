// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	africastalking "github.com/wondenge/at-notifiers/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-notifiers/gen/africastalking/views"
	goa "goa.design/goa/v3/pkg"
)

// DeliveryReportNotifierRequestBody is the type of the "africastalking"
// service "delivery_report_notifier" endpoint HTTP request body.
type DeliveryReportNotifierRequestBody struct {
	// A unique identifier for each message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The status of the message.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Mobile phone number message was sent out to.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// A unique identifier for the Telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
	// Only provided if status is Rejected or Failed.
	FailureReason *string `form:"failureReason,omitempty" json:"failureReason,omitempty" xml:"failureReason,omitempty"`
	// Number of times the request to send a message to the device was retried
	// before it succeeded or definitely failed.
	RetryCount *string `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
}

// IncomingMessageNotifierRequestBody is the type of the "africastalking"
// service "incoming_message_notifier" endpoint HTTP request body.
type IncomingMessageNotifierRequestBody struct {
	// The date and time when the message was received.
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The number that sent the message.
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// The internal ID that we use to store this message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Parameter required when responding to an on-demand user request with a
	// premium message.
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// The message content.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// The number to which the message was sent.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// A unique identifier for the telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
}

// BulkOptOutNotifierRequestBody is the type of the "africastalking" service
// "bulk_optOut_notifier" endpoint HTTP request body.
type BulkOptOutNotifierRequestBody struct {
	// Shortcode/Alphanumeric Sender ID the user opted out from.
	SenderID *string `form:"senderId,omitempty" json:"senderId,omitempty" xml:"senderId,omitempty"`
	// Mobile phone number of the subscriber who opted out.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
}

// SubNotifierRequestBody is the type of the "africastalking" service
// "sub_notifier" endpoint HTTP request body.
type SubNotifierRequestBody struct {
	// Mobile phone number to subscribe or unsubscribe.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The short code that has this product.
	ShortCode *string `form:"shortCode,omitempty" json:"shortCode,omitempty" xml:"shortCode,omitempty"`
	// The product keyword that the user has subscribed or unsubscribed from.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// The type of the update.
	UpdateType *string `form:"updateType,omitempty" json:"updateType,omitempty" xml:"updateType,omitempty"`
}

// VoiceNotifierRequestBody is the type of the "africastalking" service
// "voice_notifier" endpoint HTTP request body.
type VoiceNotifierRequestBody struct {
	// Lets us know whether the call is in session state
	IsActive *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// A unique identifier generated during each call session
	SessionID *string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
	// Whether this is an inbound or outbound call
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// Africa’s Talking phone number, in international format
	DestinationNumber *string `form:"destinationNumber,omitempty" json:"destinationNumber,omitempty" xml:"destinationNumber,omitempty"`
	// The phone number of the phone user in the call, in international format.
	CallerNumber *string `form:"callerNumber,omitempty" json:"callerNumber,omitempty" xml:"callerNumber,omitempty"`
	// The code of the country the callerNumber is calling from.
	CallerCountryCode *string `form:"callerCountryCode,omitempty" json:"callerCountryCode,omitempty" xml:"callerCountryCode,omitempty"`
	// The time the call began.
	CallStartTime *string `form:"callStartTime,omitempty" json:"callStartTime,omitempty" xml:"callStartTime,omitempty"`
	// The digits that a user enters in response to a getDigits request
	DtmfDigits *string `form:"dtmfDigits,omitempty" json:"dtmfDigits,omitempty" xml:"dtmfDigits,omitempty"`
	// The URL of the recording made for this call
	RecordingURL *string `form:"recordingUrl,omitempty" json:"recordingUrl,omitempty" xml:"recordingUrl,omitempty"`
	// The duration of the call in seconds.
	DurationInSeconds *string `form:"durationInSeconds,omitempty" json:"durationInSeconds,omitempty" xml:"durationInSeconds,omitempty"`
	// The currency used to bill this call (e.g KES, USD, GBP).
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// The total cost of the call.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// The final status of the call.
	CallSessionState *string `form:"callSessionState,omitempty" json:"callSessionState,omitempty" xml:"callSessionState,omitempty"`
	// The number which a call was forwarded to if the Dial action was used.
	DialDestinationNumber *string `form:"dialDestinationNumber,omitempty" json:"dialDestinationNumber,omitempty" xml:"dialDestinationNumber,omitempty"`
	// The duration of the dialed call if the Dial action was used.
	DialDurationInSeconds *string `form:"dialDurationInSeconds,omitempty" json:"dialDurationInSeconds,omitempty" xml:"dialDurationInSeconds,omitempty"`
	// The time the dial action began if the Dial action was used.
	DialStartTime *string `form:"dialStartTime,omitempty" json:"dialStartTime,omitempty" xml:"dialStartTime,omitempty"`
	// The reason a call could have ended
	HangupCause *string `form:"hangupCause,omitempty" json:"hangupCause,omitempty" xml:"hangupCause,omitempty"`
}

// TransferEventNotifierRequestBody is the type of the "africastalking" service
// "transfer_event_notifier" endpoint HTTP request body.
type TransferEventNotifierRequestBody struct {
	CallSessionState *string `form:"callSessionState,omitempty" json:"callSessionState,omitempty" xml:"callSessionState,omitempty"`
	IsActive         *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	Status           *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// +2347XXXXXXXXX:20, (20 is the duration in seconds)
	CallTransferParam *string `form:"callTransferParam,omitempty" json:"callTransferParam,omitempty" xml:"callTransferParam,omitempty"`
	// Number call was transferred to
	CallTransferredToNumber *string `form:"callTransferredToNumber,omitempty" json:"callTransferredToNumber,omitempty" xml:"callTransferredToNumber,omitempty"`
	CallTransferState       *string `form:"callTransferState,omitempty" json:"callTransferState,omitempty" xml:"callTransferState,omitempty"`
	CallTransferHangupCause *string `form:"callTransferHangupCause,omitempty" json:"callTransferHangupCause,omitempty" xml:"callTransferHangupCause,omitempty"`
}

// UssdNotifierRequestBody is the type of the "africastalking" service
// "ussd_notifier" endpoint HTTP request body.
type UssdNotifierRequestBody struct {
	// A unique value generated when the session starts.
	SessionID *string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
	// Mobile number of the subscriber interacting with USSD application.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Telco of the mobile number interacting with USSD application.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
	// USSD code assigned to application.
	ServiceCode *string `form:"serviceCode,omitempty" json:"serviceCode,omitempty" xml:"serviceCode,omitempty"`
	// Shows the user input.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// ValidationNotifierRequestBody is the type of the "africastalking" service
// "validation_notifier" endpoint HTTP request body.
type ValidationNotifierRequestBody struct {
	// The transaction id within Africa’s Talking.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// The phone number of the mobile subscriber receiving the airtime.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount - in the provided currency - that the client will receive.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// StatusNotifierRequestBody is the type of the "africastalking" service
// "status_notifier" endpoint HTTP request body.
type StatusNotifierRequestBody struct {
	// The request ID sent back as a response to the airtime send request.
	RequestID *string `form:"requestId,omitempty" json:"requestId,omitempty" xml:"requestId,omitempty"`
	// The Transaction status.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// PaymentNotifierRequestBody is the type of the "africastalking" service
// "payment_notifier" endpoint HTTP request body.
type PaymentNotifierRequestBody struct {
	// Unique transactionId generated for every payment.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Category of the payment.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// Payment provider that facilitated this transaction.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Unique ID generated by the payment provider for this transaction.
	ProviderRefID *string `form:"providerRefId,omitempty" json:"providerRefId,omitempty" xml:"providerRefId,omitempty"`
	// Name or number of channel that used to facilitate this payment.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string `form:"clientAccount,omitempty" json:"clientAccount,omitempty" xml:"clientAccount,omitempty"`
	// Africa’s Talking Payment Product used to facilitate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Type of party providing the funds for this transaction (the Debit Party).
	SourceType *string `form:"sourceType,omitempty" json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// Unique identifier of the party that is providing the funds for this
	// transaction.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Unique identifier of the party receiving funds in this transaction (the
	// Credit Party).
	DestinationType *string `form:"destinationType,omitempty" json:"destinationType,omitempty" xml:"destinationType,omitempty"`
	// Unique identifier of the party  receiving the funds for this transaction.
	Destination *string `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
	// Value being exchanged in this transaction.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// Fee charged by a payment provider to facilitate this transaction.
	ProviderFee *string `form:"providerFee,omitempty" json:"providerFee,omitempty" xml:"providerFee,omitempty"`
	// The final status of this transaction
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of this transaction.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Any metadata that was sent by your application when it initiated this
	// transaction.
	RequestMetadata *string `form:"requestMetadata,omitempty" json:"requestMetadata,omitempty" xml:"requestMetadata,omitempty"`
	// Any additional data that we receive from a payment provider for a particular
	// transaction.
	ProviderMetadata *string `form:"providerMetadata,omitempty" json:"providerMetadata,omitempty" xml:"providerMetadata,omitempty"`
	// The date and time when a successful transaction was completed.
	TransactionDate *string `form:"transactionDate,omitempty" json:"transactionDate,omitempty" xml:"transactionDate,omitempty"`
}

// C2bValidationNotifierRequestBody is the type of the "africastalking" service
// "c2b_validation_notifier" endpoint HTTP request body.
type C2bValidationNotifierRequestBody struct {
	// Payment provider that is facilitating this transaction
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string `form:"clientAccount,omitempty" json:"clientAccount,omitempty" xml:"clientAccount,omitempty"`
	// Identifies the Africa’s Talking Payment Product used to facilitate this
	// transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Phone number of the mobile subscriber who is initiating the C2B transaction.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value being exchanged in this transaction
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Additional data received from a payment provider for a particular transaction
	ProviderMetadata map[string]string `form:"providerMetadata,omitempty" json:"providerMetadata,omitempty" xml:"providerMetadata,omitempty"`
}

// B2cValidationNotifierRequestBody is the type of the "africastalking" service
// "b2c_validation_notifier" endpoint HTTP request body.
type B2cValidationNotifierRequestBody struct {
	// The transaction id within Africa’s Talking.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// The phone number of the mobile subscriber receiving the B2C payment.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount - in the provided currency - that the client will receive.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// The IPv4 address that initiated the B2C transaction.
	SourceIPAddress *string `form:"sourceIpAddress,omitempty" json:"sourceIpAddress,omitempty" xml:"sourceIpAddress,omitempty"`
	// A map of metadata associated with this request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// IotNotifierRequestBody is the type of the "africastalking" service
// "iot_notifier" endpoint HTTP request body.
type IotNotifierRequestBody struct {
	// The MQTT packet sent by the publishing device.
	Payload *string `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Message channel to which the message was sent by the publishing MQTT client
	Topic *string `form:"topic,omitempty" json:"topic,omitempty" xml:"topic,omitempty"`
}

// UssdNotifierResponseBody is the type of the "africastalking" service
// "ussd_notifier" endpoint HTTP response body.
type UssdNotifierResponseBody struct {
	// Plain text response back to AT gateway
	Response *string `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// ValidationNotifierResponseBody is the type of the "africastalking" service
// "validation_notifier" endpoint HTTP response body.
type ValidationNotifierResponseBody struct {
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// B2cValidationNotifierResponseBody is the type of the "africastalking"
// service "b2c_validation_notifier" endpoint HTTP response body.
type B2cValidationNotifierResponseBody struct {
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewUssdNotifierResponseBody builds the HTTP response body from the result of
// the "ussd_notifier" endpoint of the "africastalking" service.
func NewUssdNotifierResponseBody(res *africastalkingviews.USSDResponseView) *UssdNotifierResponseBody {
	body := &UssdNotifierResponseBody{
		Response: res.Response,
	}
	return body
}

// NewValidationNotifierResponseBody builds the HTTP response body from the
// result of the "validation_notifier" endpoint of the "africastalking" service.
func NewValidationNotifierResponseBody(res *africastalking.AirtimeValidationResponse) *ValidationNotifierResponseBody {
	body := &ValidationNotifierResponseBody{
		Status: res.Status,
	}
	return body
}

// NewB2cValidationNotifierResponseBody builds the HTTP response body from the
// result of the "b2c_validation_notifier" endpoint of the "africastalking"
// service.
func NewB2cValidationNotifierResponseBody(res *africastalking.B2CValidationNotificationResponse) *B2cValidationNotifierResponseBody {
	body := &B2cValidationNotifierResponseBody{
		Status: res.Status,
	}
	return body
}

// NewDeliveryReportNotifierDeliveryReportPayload builds a africastalking
// service delivery_report_notifier endpoint payload.
func NewDeliveryReportNotifierDeliveryReportPayload(body *DeliveryReportNotifierRequestBody) *africastalking.DeliveryReportPayload {
	v := &africastalking.DeliveryReportPayload{
		ID:            body.ID,
		Status:        body.Status,
		PhoneNumber:   body.PhoneNumber,
		NetworkCode:   body.NetworkCode,
		FailureReason: body.FailureReason,
		RetryCount:    body.RetryCount,
	}

	return v
}

// NewIncomingMessageNotifierIncomingMessagePayload builds a africastalking
// service incoming_message_notifier endpoint payload.
func NewIncomingMessageNotifierIncomingMessagePayload(body *IncomingMessageNotifierRequestBody) *africastalking.IncomingMessagePayload {
	v := &africastalking.IncomingMessagePayload{
		Date:        body.Date,
		From:        body.From,
		ID:          body.ID,
		LinkID:      body.LinkID,
		Text:        body.Text,
		To:          body.To,
		NetworkCode: body.NetworkCode,
	}

	return v
}

// NewBulkOptOutNotifierBulkSMSOptOutPayload builds a africastalking service
// bulk_optOut_notifier endpoint payload.
func NewBulkOptOutNotifierBulkSMSOptOutPayload(body *BulkOptOutNotifierRequestBody) *africastalking.BulkSMSOptOutPayload {
	v := &africastalking.BulkSMSOptOutPayload{
		SenderID:    body.SenderID,
		PhoneNumber: body.PhoneNumber,
	}

	return v
}

// NewSubNotifierSubNotificationPayload builds a africastalking service
// sub_notifier endpoint payload.
func NewSubNotifierSubNotificationPayload(body *SubNotifierRequestBody) *africastalking.SubNotificationPayload {
	v := &africastalking.SubNotificationPayload{
		PhoneNumber: body.PhoneNumber,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		UpdateType:  body.UpdateType,
	}

	return v
}

// NewVoiceNotifierVoiceNotificationPayload builds a africastalking service
// voice_notifier endpoint payload.
func NewVoiceNotifierVoiceNotificationPayload(body *VoiceNotifierRequestBody) *africastalking.VoiceNotificationPayload {
	v := &africastalking.VoiceNotificationPayload{
		SessionID:             body.SessionID,
		Direction:             body.Direction,
		DestinationNumber:     body.DestinationNumber,
		CallerNumber:          body.CallerNumber,
		CallerCountryCode:     body.CallerCountryCode,
		CallStartTime:         body.CallStartTime,
		DtmfDigits:            body.DtmfDigits,
		RecordingURL:          body.RecordingURL,
		DurationInSeconds:     body.DurationInSeconds,
		CurrencyCode:          body.CurrencyCode,
		Amount:                body.Amount,
		CallSessionState:      body.CallSessionState,
		DialDestinationNumber: body.DialDestinationNumber,
		DialDurationInSeconds: body.DialDurationInSeconds,
		DialStartTime:         body.DialStartTime,
		HangupCause:           body.HangupCause,
	}
	if body.IsActive != nil {
		v.IsActive = *body.IsActive
	}
	if body.IsActive == nil {
		v.IsActive = "0"
	}

	return v
}

// NewTransferEventNotifierTransferEventPayload builds a africastalking service
// transfer_event_notifier endpoint payload.
func NewTransferEventNotifierTransferEventPayload(body *TransferEventNotifierRequestBody) *africastalking.TransferEventPayload {
	v := &africastalking.TransferEventPayload{
		CallSessionState:        body.CallSessionState,
		Status:                  body.Status,
		CallTransferParam:       body.CallTransferParam,
		CallTransferredToNumber: body.CallTransferredToNumber,
		CallTransferState:       body.CallTransferState,
		CallTransferHangupCause: body.CallTransferHangupCause,
	}
	if body.IsActive != nil {
		v.IsActive = *body.IsActive
	}
	if body.IsActive == nil {
		v.IsActive = "1"
	}

	return v
}

// NewUssdNotifierUSSDPayload builds a africastalking service ussd_notifier
// endpoint payload.
func NewUssdNotifierUSSDPayload(body *UssdNotifierRequestBody) *africastalking.USSDPayload {
	v := &africastalking.USSDPayload{
		SessionID:   body.SessionID,
		PhoneNumber: body.PhoneNumber,
		NetworkCode: body.NetworkCode,
		ServiceCode: body.ServiceCode,
		Text:        body.Text,
	}

	return v
}

// NewValidationNotifierAirtimeValidationPayload builds a africastalking
// service validation_notifier endpoint payload.
func NewValidationNotifierAirtimeValidationPayload(body *ValidationNotifierRequestBody) *africastalking.AirtimeValidationPayload {
	v := &africastalking.AirtimeValidationPayload{
		TransactionID: body.TransactionID,
		PhoneNumber:   body.PhoneNumber,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
	}

	return v
}

// NewStatusNotifierAirtimeStatusPayload builds a africastalking service
// status_notifier endpoint payload.
func NewStatusNotifierAirtimeStatusPayload(body *StatusNotifierRequestBody) *africastalking.AirtimeStatusPayload {
	v := &africastalking.AirtimeStatusPayload{
		RequestID: body.RequestID,
		Status:    body.Status,
	}

	return v
}

// NewPaymentNotifierPaymentNotificationPayload builds a africastalking service
// payment_notifier endpoint payload.
func NewPaymentNotifierPaymentNotificationPayload(body *PaymentNotifierRequestBody) *africastalking.PaymentNotificationPayload {
	v := &africastalking.PaymentNotificationPayload{
		TransactionID:    *body.TransactionID,
		Category:         *body.Category,
		Provider:         *body.Provider,
		ProviderRefID:    body.ProviderRefID,
		ProviderChannel:  *body.ProviderChannel,
		ClientAccount:    body.ClientAccount,
		ProductName:      *body.ProductName,
		SourceType:       *body.SourceType,
		Source:           *body.Source,
		DestinationType:  *body.DestinationType,
		Destination:      *body.Destination,
		Value:            *body.Value,
		TransactionFee:   body.TransactionFee,
		ProviderFee:      body.ProviderFee,
		Status:           *body.Status,
		Description:      *body.Description,
		RequestMetadata:  *body.RequestMetadata,
		ProviderMetadata: *body.ProviderMetadata,
		TransactionDate:  body.TransactionDate,
	}

	return v
}

// NewC2bValidationNotifierC2BValidationNotificationPayload builds a
// africastalking service c2b_validation_notifier endpoint payload.
func NewC2bValidationNotifierC2BValidationNotificationPayload(body *C2bValidationNotifierRequestBody) *africastalking.C2BValidationNotificationPayload {
	v := &africastalking.C2BValidationNotificationPayload{
		Provider:      *body.Provider,
		ClientAccount: body.ClientAccount,
		ProductName:   *body.ProductName,
		PhoneNumber:   *body.PhoneNumber,
		Value:         *body.Value,
	}
	v.ProviderMetadata = make(map[string]string, len(body.ProviderMetadata))
	for key, val := range body.ProviderMetadata {
		tk := key
		tv := val
		v.ProviderMetadata[tk] = tv
	}

	return v
}

// NewB2cValidationNotifierB2CValidationNotificationPayload builds a
// africastalking service b2c_validation_notifier endpoint payload.
func NewB2cValidationNotifierB2CValidationNotificationPayload(body *B2cValidationNotifierRequestBody) *africastalking.B2CValidationNotificationPayload {
	v := &africastalking.B2CValidationNotificationPayload{
		TransactionID:   body.TransactionID,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
		SourceIPAddress: body.SourceIPAddress,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewIotNotifierIoTNotificationPayload builds a africastalking service
// iot_notifier endpoint payload.
func NewIotNotifierIoTNotificationPayload(body *IotNotifierRequestBody) *africastalking.IoTNotificationPayload {
	v := &africastalking.IoTNotificationPayload{
		Payload: body.Payload,
		Topic:   body.Topic,
	}

	return v
}

// ValidateDeliveryReportNotifierRequestBody runs the validations defined on
// delivery_report_notifier_request_body
func ValidateDeliveryReportNotifierRequestBody(body *DeliveryReportNotifierRequestBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Sent" || *body.Status == "Submitted" || *body.Status == "Buffered" || *body.Status == "Rejected" || *body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Sent", "Submitted", "Buffered", "Rejected", "Success", "Failed"}))
		}
	}
	if body.NetworkCode != nil {
		if !(*body.NetworkCode == "62120" || *body.NetworkCode == "62130" || *body.NetworkCode == "62150" || *body.NetworkCode == "62160" || *body.NetworkCode == "63510" || *body.NetworkCode == "63513" || *body.NetworkCode == "63514" || *body.NetworkCode == "63902" || *body.NetworkCode == "63903" || *body.NetworkCode == "63907" || *body.NetworkCode == "63999" || *body.NetworkCode == "64002" || *body.NetworkCode == "64003" || *body.NetworkCode == "64004" || *body.NetworkCode == "64005" || *body.NetworkCode == "64007" || *body.NetworkCode == "64009" || *body.NetworkCode == "64101" || *body.NetworkCode == "64110" || *body.NetworkCode == "64111" || *body.NetworkCode == "64114" || *body.NetworkCode == "65001" || *body.NetworkCode == "65010" || *body.NetworkCode == "99999") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.networkCode", *body.NetworkCode, []interface{}{"62120", "62130", "62150", "62160", "63510", "63513", "63514", "63902", "63903", "63907", "63999", "64002", "64003", "64004", "64005", "64007", "64009", "64101", "64110", "64111", "64114", "65001", "65010", "99999"}))
		}
	}
	if body.FailureReason != nil {
		if !(*body.FailureReason == "InsufficientCredit" || *body.FailureReason == "InvalidLinkId" || *body.FailureReason == "UserIsInactive" || *body.FailureReason == "UserInBlackList" || *body.FailureReason == "UserAccountSuspended" || *body.FailureReason == "NotNetworkSubscriber" || *body.FailureReason == "UserNotSubscribedToProduct" || *body.FailureReason == "UserDoesNotExist" || *body.FailureReason == "DeliveryFailure") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.failureReason", *body.FailureReason, []interface{}{"InsufficientCredit", "InvalidLinkId", "UserIsInactive", "UserInBlackList", "UserAccountSuspended", "NotNetworkSubscriber", "UserNotSubscribedToProduct", "UserDoesNotExist", "DeliveryFailure"}))
		}
	}
	return
}

// ValidateIncomingMessageNotifierRequestBody runs the validations defined on
// incoming_message_notifier_request_body
func ValidateIncomingMessageNotifierRequestBody(body *IncomingMessageNotifierRequestBody) (err error) {
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.NetworkCode != nil {
		if !(*body.NetworkCode == "62120" || *body.NetworkCode == "62130" || *body.NetworkCode == "62150" || *body.NetworkCode == "62160" || *body.NetworkCode == "63510" || *body.NetworkCode == "63513" || *body.NetworkCode == "63514" || *body.NetworkCode == "63902" || *body.NetworkCode == "63903" || *body.NetworkCode == "63907" || *body.NetworkCode == "63999" || *body.NetworkCode == "64002" || *body.NetworkCode == "64003" || *body.NetworkCode == "64004" || *body.NetworkCode == "64005" || *body.NetworkCode == "64007" || *body.NetworkCode == "64009" || *body.NetworkCode == "64101" || *body.NetworkCode == "64110" || *body.NetworkCode == "64111" || *body.NetworkCode == "64114" || *body.NetworkCode == "65001" || *body.NetworkCode == "65010" || *body.NetworkCode == "99999") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.networkCode", *body.NetworkCode, []interface{}{"62120", "62130", "62150", "62160", "63510", "63513", "63514", "63902", "63903", "63907", "63999", "64002", "64003", "64004", "64005", "64007", "64009", "64101", "64110", "64111", "64114", "65001", "65010", "99999"}))
		}
	}
	return
}

// ValidateSubNotifierRequestBody runs the validations defined on
// sub_notifier_request_body
func ValidateSubNotifierRequestBody(body *SubNotifierRequestBody) (err error) {
	if body.UpdateType != nil {
		if !(*body.UpdateType == "addition" || *body.UpdateType == "deletion") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.updateType", *body.UpdateType, []interface{}{"addition", "deletion"}))
		}
	}
	return
}

// ValidateVoiceNotifierRequestBody runs the validations defined on
// voice_notifier_request_body
func ValidateVoiceNotifierRequestBody(body *VoiceNotifierRequestBody) (err error) {
	if body.HangupCause != nil {
		if !(*body.HangupCause == "NORMAL_CLEARING" || *body.HangupCause == "CALL_REJECTED" || *body.HangupCause == "NORMAL_TEMPORARY_FAILURE" || *body.HangupCause == "RECOVERY_ON_TIMER_EXPIRE" || *body.HangupCause == "ORIGINATOR_CANCEL" || *body.HangupCause == "LOSE_RACE" || *body.HangupCause == "USER_BUSY" || *body.HangupCause == "NO_ANSWER" || *body.HangupCause == "NO_USER_RESPONSE" || *body.HangupCause == "SUBSCRIBER_ABSENT" || *body.HangupCause == "SERVICE_UNAVAILABLE" || *body.HangupCause == "USER_NOT_REGISTERED" || *body.HangupCause == "UNALLOCATED_NUMBER" || *body.HangupCause == "UNSPECIFIED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.hangupCause", *body.HangupCause, []interface{}{"NORMAL_CLEARING", "CALL_REJECTED", "NORMAL_TEMPORARY_FAILURE", "RECOVERY_ON_TIMER_EXPIRE", "ORIGINATOR_CANCEL", "LOSE_RACE", "USER_BUSY", "NO_ANSWER", "NO_USER_RESPONSE", "SUBSCRIBER_ABSENT", "SERVICE_UNAVAILABLE", "USER_NOT_REGISTERED", "UNALLOCATED_NUMBER", "UNSPECIFIED"}))
		}
	}
	return
}

// ValidateTransferEventNotifierRequestBody runs the validations defined on
// transfer_event_notifier_request_body
func ValidateTransferEventNotifierRequestBody(body *TransferEventNotifierRequestBody) (err error) {
	if body.CallSessionState != nil {
		if !(*body.CallSessionState == "Active" || *body.CallSessionState == "Transferred" || *body.CallSessionState == "TransferCompleted") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callSessionState", *body.CallSessionState, []interface{}{"Active", "Transferred", "TransferCompleted"}))
		}
	}
	if body.IsActive != nil {
		if !(*body.IsActive == "0" || *body.IsActive == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.isActive", *body.IsActive, []interface{}{"0", "1"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Success") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success"}))
		}
	}
	if body.CallTransferState != nil {
		if !(*body.CallTransferState == " Active" || *body.CallTransferState == "Completed" || *body.CallTransferState == "CallerHangup" || *body.CallTransferState == "CalleeHangup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callTransferState", *body.CallTransferState, []interface{}{" Active", "Completed", "CallerHangup", "CalleeHangup"}))
		}
	}
	if body.CallTransferHangupCause != nil {
		if !(*body.CallTransferHangupCause == "DestinationNotSupported" || *body.CallTransferHangupCause == "InvalidPhoneNumber" || *body.CallTransferHangupCause == "NoActiveClient" || *body.CallTransferHangupCause == "NotAllowed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callTransferHangupCause", *body.CallTransferHangupCause, []interface{}{"DestinationNotSupported", "InvalidPhoneNumber", "NoActiveClient", "NotAllowed"}))
		}
	}
	return
}

// ValidateStatusNotifierRequestBody runs the validations defined on
// status_notifier_request_body
func ValidateStatusNotifierRequestBody(body *StatusNotifierRequestBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidatePaymentNotifierRequestBody runs the validations defined on
// payment_notifier_request_body
func ValidatePaymentNotifierRequestBody(body *PaymentNotifierRequestBody) (err error) {
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transactionId", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.Provider == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider", "body"))
	}
	if body.ProviderChannel == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerChannel", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.SourceType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceType", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.DestinationType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destinationType", "body"))
	}
	if body.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destination", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.RequestMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requestMetadata", "body"))
	}
	if body.ProviderMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
	}
	if body.Category != nil {
		if !(*body.Category == "BankCheckout" || *body.Category == "CardCheckout" || *body.Category == "MobileCheckout" || *body.Category == "MobileC2B" || *body.Category == "MobileB2C" || *body.Category == "MobileB2B" || *body.Category == "BankTransfer" || *body.Category == "WalletTransfer" || *body.Category == "UserStashTopup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
		}
	}
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "Segovia" || *body.Provider == "Flutterwave" || *body.Provider == "Admin" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
		}
	}
	if body.SourceType != nil {
		if !(*body.SourceType == "PhoneNumber" || *body.SourceType == "BankAccount" || *body.SourceType == "Card" || *body.SourceType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.sourceType", *body.SourceType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
	}
	if body.DestinationType != nil {
		if !(*body.DestinationType == "PhoneNumber" || *body.DestinationType == "BankAccount" || *body.DestinationType == "Card" || *body.DestinationType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destinationType", *body.DestinationType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateC2bValidationNotifierRequestBody runs the validations defined on
// c2b_validation_notifier_request_body
func ValidateC2bValidationNotifierRequestBody(body *C2bValidationNotifierRequestBody) (err error) {
	if body.Provider == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.ProviderMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
	}
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "TigoTanzania" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "TigoTanzania", "Athena"}))
		}
	}
	return
}
