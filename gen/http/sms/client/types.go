// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	sms "github.com/wondenge/at-notifiers/gen/sms"
)

// DeliveryReportRequestBody is the type of the "sms" service "deliveryReport"
// endpoint HTTP request body.
type DeliveryReportRequestBody struct {
	// A unique identifier for each message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The status of the message.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Mobile phone number message was sent out to.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// A unique identifier for the Telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
	// Only provided if status is Rejected or Failed.
	FailureReason *string `form:"failureReason,omitempty" json:"failureReason,omitempty" xml:"failureReason,omitempty"`
	// Number of times the request to send a message to the device was retried
	// before it succeeded or definitely failed.
	RetryCount *string `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
}

// IncomingMessageRequestBody is the type of the "sms" service
// "incomingMessage" endpoint HTTP request body.
type IncomingMessageRequestBody struct {
	// The date and time when the message was received.
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The number that sent the message.
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// The internal ID that we use to store this message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Parameter required when responding to an on-demand user request with a
	// premium message.
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// The message content.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// The number to which the message was sent.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// A unique identifier for the telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
}

// BulkSMSOptOutRequestBody is the type of the "sms" service "bulkSMSOptOut"
// endpoint HTTP request body.
type BulkSMSOptOutRequestBody struct {
	// Shortcode/Alphanumeric Sender ID the user opted out from.
	SenderID *string `form:"senderId,omitempty" json:"senderId,omitempty" xml:"senderId,omitempty"`
	// Mobile phone number of the subscriber who opted out.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
}

// SubNotifierRequestBody is the type of the "sms" service "subNotifier"
// endpoint HTTP request body.
type SubNotifierRequestBody struct {
	// Mobile phone number to subscribe or unsubscribe.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The short code that has this product.
	ShortCode *string `form:"shortCode,omitempty" json:"shortCode,omitempty" xml:"shortCode,omitempty"`
	// The product keyword that the user has subscribed or unsubscribed from.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// The type of the update.
	UpdateType *string `form:"updateType,omitempty" json:"updateType,omitempty" xml:"updateType,omitempty"`
}

// NewDeliveryReportRequestBody builds the HTTP request body from the payload
// of the "deliveryReport" endpoint of the "sms" service.
func NewDeliveryReportRequestBody(p *sms.DeliveryReport1) *DeliveryReportRequestBody {
	body := &DeliveryReportRequestBody{
		ID:            p.ID,
		Status:        p.Status,
		PhoneNumber:   p.PhoneNumber,
		NetworkCode:   p.NetworkCode,
		FailureReason: p.FailureReason,
		RetryCount:    p.RetryCount,
	}
	return body
}

// NewIncomingMessageRequestBody builds the HTTP request body from the payload
// of the "incomingMessage" endpoint of the "sms" service.
func NewIncomingMessageRequestBody(p *sms.IncomingMessage1) *IncomingMessageRequestBody {
	body := &IncomingMessageRequestBody{
		Date:        p.Date,
		From:        p.From,
		ID:          p.ID,
		LinkID:      p.LinkID,
		Text:        p.Text,
		To:          p.To,
		NetworkCode: p.NetworkCode,
	}
	return body
}

// NewBulkSMSOptOutRequestBody builds the HTTP request body from the payload of
// the "bulkSMSOptOut" endpoint of the "sms" service.
func NewBulkSMSOptOutRequestBody(p *sms.BulkSMSOptOut1) *BulkSMSOptOutRequestBody {
	body := &BulkSMSOptOutRequestBody{
		SenderID:    p.SenderID,
		PhoneNumber: p.PhoneNumber,
	}
	return body
}

// NewSubNotifierRequestBody builds the HTTP request body from the payload of
// the "subNotifier" endpoint of the "sms" service.
func NewSubNotifierRequestBody(p *sms.SubscriptionNotification) *SubNotifierRequestBody {
	body := &SubNotifierRequestBody{
		PhoneNumber: p.PhoneNumber,
		ShortCode:   p.ShortCode,
		Keyword:     p.Keyword,
		UpdateType:  p.UpdateType,
	}
	return body
}
