// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	payments "github.com/wondenge/at-notifiers/gen/payments"
	goahttp "goa.design/goa/v3/http"
)

// BuildPaymentNotifierRequest instantiates a HTTP request object with method
// and path set to call the "payments" service "paymentNotifier" endpoint
func (c *Client) BuildPaymentNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PaymentNotifierPaymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("payments", "paymentNotifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePaymentNotifierRequest returns an encoder for requests sent to the
// payments paymentNotifier server.
func EncodePaymentNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*payments.PaymentNotification)
		if !ok {
			return goahttp.ErrInvalidType("payments", "paymentNotifier", "*payments.PaymentNotification", v)
		}
		body := NewPaymentNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("payments", "paymentNotifier", err)
		}
		return nil
	}
}

// DecodePaymentNotifierResponse returns a decoder for responses returned by
// the payments paymentNotifier endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodePaymentNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("payments", "paymentNotifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("payments", "paymentNotifier", resp.StatusCode, string(body))
		}
	}
}

// BuildC2bNotifierRequest instantiates a HTTP request object with method and
// path set to call the "payments" service "c2bNotifier" endpoint
func (c *Client) BuildC2bNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: C2bNotifierPaymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("payments", "c2bNotifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeC2bNotifierRequest returns an encoder for requests sent to the
// payments c2bNotifier server.
func EncodeC2bNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*payments.C2BValidationNotification)
		if !ok {
			return goahttp.ErrInvalidType("payments", "c2bNotifier", "*payments.C2BValidationNotification", v)
		}
		body := NewC2bNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("payments", "c2bNotifier", err)
		}
		return nil
	}
}

// DecodeC2bNotifierResponse returns a decoder for responses returned by the
// payments c2bNotifier endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeC2bNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("payments", "c2bNotifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("payments", "c2bNotifier", resp.StatusCode, string(body))
		}
	}
}

// BuildB2cNotifierRequest instantiates a HTTP request object with method and
// path set to call the "payments" service "b2cNotifier" endpoint
func (c *Client) BuildB2cNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: B2cNotifierPaymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("payments", "b2cNotifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeB2cNotifierRequest returns an encoder for requests sent to the
// payments b2cNotifier server.
func EncodeB2cNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*payments.B2CValidationNotificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("payments", "b2cNotifier", "*payments.B2CValidationNotificationPayload", v)
		}
		body := NewB2cNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("payments", "b2cNotifier", err)
		}
		return nil
	}
}

// DecodeB2cNotifierResponse returns a decoder for responses returned by the
// payments b2cNotifier endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeB2cNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body B2cNotifierResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("payments", "b2cNotifier", err)
			}
			err = ValidateB2cNotifierResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("payments", "b2cNotifier", err)
			}
			res := NewB2cNotifierB2CValidationNotificationResponseCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("payments", "b2cNotifier", resp.StatusCode, string(body))
		}
	}
}
