// Code generated by goa v3.1.3, DO NOT EDIT.
//
// voice endpoints
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package voice

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "voice" service endpoints.
type Endpoints struct {
	VoiceNotifier  endpoint.Endpoint
	TransferEvents endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "voice" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		VoiceNotifier:  NewVoiceNotifierEndpoint(s),
		TransferEvents: NewTransferEventsEndpoint(s),
	}
}

// Use applies the given middleware to all the "voice" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.VoiceNotifier = m(e.VoiceNotifier)
	e.TransferEvents = m(e.TransferEvents)
}

// NewVoiceNotifierEndpoint returns an endpoint function that calls the method
// "voiceNotifier" of service "voice".
func NewVoiceNotifierEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*VoiceNotification)
		return s.VoiceNotifier(ctx, p)
	}
}

// NewTransferEventsEndpoint returns an endpoint function that calls the method
// "transferEvents" of service "voice".
func NewTransferEventsEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CallTransferEvent)
		return s.TransferEvents(ctx, p)
	}
}
