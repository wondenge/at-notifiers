// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms client HTTP transport
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the sms service endpoint HTTP clients.
type Client struct {
	// DeliveryReport Doer is the HTTP client used to make requests to the
	// deliveryReport endpoint.
	DeliveryReportDoer goahttp.Doer

	// IncomingMessage Doer is the HTTP client used to make requests to the
	// incomingMessage endpoint.
	IncomingMessageDoer goahttp.Doer

	// BulkSMSOptOut Doer is the HTTP client used to make requests to the
	// bulkSMSOptOut endpoint.
	BulkSMSOptOutDoer goahttp.Doer

	// SubNotifier Doer is the HTTP client used to make requests to the subNotifier
	// endpoint.
	SubNotifierDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the sms service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		DeliveryReportDoer:  doer,
		IncomingMessageDoer: doer,
		BulkSMSOptOutDoer:   doer,
		SubNotifierDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// DeliveryReport returns an endpoint that makes HTTP requests to the sms
// service deliveryReport server.
func (c *Client) DeliveryReport() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeDeliveryReportRequest(c.encoder)
		decodeResponse = DecodeDeliveryReportResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeliveryReportRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeliveryReportDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("sms", "deliveryReport", err)
		}
		return decodeResponse(resp)
	}
}

// IncomingMessage returns an endpoint that makes HTTP requests to the sms
// service incomingMessage server.
func (c *Client) IncomingMessage() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeIncomingMessageRequest(c.encoder)
		decodeResponse = DecodeIncomingMessageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIncomingMessageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IncomingMessageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("sms", "incomingMessage", err)
		}
		return decodeResponse(resp)
	}
}

// BulkSMSOptOut returns an endpoint that makes HTTP requests to the sms
// service bulkSMSOptOut server.
func (c *Client) BulkSMSOptOut() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeBulkSMSOptOutRequest(c.encoder)
		decodeResponse = DecodeBulkSMSOptOutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBulkSMSOptOutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BulkSMSOptOutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("sms", "bulkSMSOptOut", err)
		}
		return decodeResponse(resp)
	}
}

// SubNotifier returns an endpoint that makes HTTP requests to the sms service
// subNotifier server.
func (c *Client) SubNotifier() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSubNotifierRequest(c.encoder)
		decodeResponse = DecodeSubNotifierResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSubNotifierRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubNotifierDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("sms", "subNotifier", err)
		}
		return decodeResponse(resp)
	}
}
