// Code generated by goa v3.1.3, DO NOT EDIT.
//
// atsvr HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	airtimec "github.com/wondenge/at-notifiers/gen/http/airtime/client"
	healthc "github.com/wondenge/at-notifiers/gen/http/health/client"
	iotc "github.com/wondenge/at-notifiers/gen/http/iot/client"
	paymentsc "github.com/wondenge/at-notifiers/gen/http/payments/client"
	smsc "github.com/wondenge/at-notifiers/gen/http/sms/client"
	ussdc "github.com/wondenge/at-notifiers/gen/http/ussd/client"
	voicec "github.com/wondenge/at-notifiers/gen/http/voice/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `airtime (validation|status)
health show
iot iot-notifier
payments (payment-notifier|c2b-notifier|b2c-notifier)
sms (delivery-report|incoming-message|bulk-sms-opt-out|sub-notifier)
ussd ussd-notifier
voice (voice-notifier|transfer-events)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` airtime validation --body '{
      "amount": 500,
      "currencyCode": "KES",
      "phoneNumber": "+254711XXXYYY",
      "transactionId": "SomeTransactionID"
   }'` + "\n" +
		os.Args[0] + ` health show` + "\n" +
		os.Args[0] + ` iot iot-notifier --body '{
      "payload": "42",
      "topic": "myusername/devicegroup/sensor/id/1/temperature"
   }'` + "\n" +
		os.Args[0] + ` payments payment-notifier --body '{
      "category": "MobileB2B",
      "clientAccount": "Corrupti ducimus autem cum eum exercitationem.",
      "description": "Hic sequi quis nihil asperiores culpa.",
      "destination": "Eveniet doloribus.",
      "destinationType": "Card",
      "productName": "Molestiae animi officiis.",
      "provider": "Athena",
      "providerChannel": "Velit eveniet est veritatis.",
      "providerFee": "Minus corrupti voluptatem eos.",
      "providerMetadata": "Sunt nemo ex esse eveniet quas.",
      "providerRefId": "Vitae qui qui omnis.",
      "requestMetadata": "Corrupti corrupti nobis corporis qui.",
      "source": "Fugiat quod nemo natus.",
      "sourceType": "PhoneNumber",
      "status": "Success",
      "transactionDate": "Est quibusdam hic ut.",
      "transactionFee": "Quas est nostrum incidunt impedit vel.",
      "transactionId": "In eum.",
      "value": "Ut eveniet."
   }'` + "\n" +
		os.Args[0] + ` sms delivery-report --body '{
      "failureReason": "UserAccountSuspended",
      "id": "Consequatur et dicta.",
      "networkCode": "64110",
      "phoneNumber": "Recusandae perspiciatis excepturi reiciendis est quasi est.",
      "retryCount": "Non quo omnis consequatur vero.",
      "status": "Buffered"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		airtimeFlags = flag.NewFlagSet("airtime", flag.ContinueOnError)

		airtimeValidationFlags    = flag.NewFlagSet("validation", flag.ExitOnError)
		airtimeValidationBodyFlag = airtimeValidationFlags.String("body", "REQUIRED", "")

		airtimeStatusFlags    = flag.NewFlagSet("status", flag.ExitOnError)
		airtimeStatusBodyFlag = airtimeStatusFlags.String("body", "REQUIRED", "")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		iotFlags = flag.NewFlagSet("iot", flag.ContinueOnError)

		iotIotNotifierFlags    = flag.NewFlagSet("iot-notifier", flag.ExitOnError)
		iotIotNotifierBodyFlag = iotIotNotifierFlags.String("body", "REQUIRED", "")

		paymentsFlags = flag.NewFlagSet("payments", flag.ContinueOnError)

		paymentsPaymentNotifierFlags    = flag.NewFlagSet("payment-notifier", flag.ExitOnError)
		paymentsPaymentNotifierBodyFlag = paymentsPaymentNotifierFlags.String("body", "REQUIRED", "")

		paymentsC2bNotifierFlags    = flag.NewFlagSet("c2b-notifier", flag.ExitOnError)
		paymentsC2bNotifierBodyFlag = paymentsC2bNotifierFlags.String("body", "REQUIRED", "")

		paymentsB2cNotifierFlags    = flag.NewFlagSet("b2c-notifier", flag.ExitOnError)
		paymentsB2cNotifierBodyFlag = paymentsB2cNotifierFlags.String("body", "REQUIRED", "")

		smsFlags = flag.NewFlagSet("sms", flag.ContinueOnError)

		smsDeliveryReportFlags    = flag.NewFlagSet("delivery-report", flag.ExitOnError)
		smsDeliveryReportBodyFlag = smsDeliveryReportFlags.String("body", "REQUIRED", "")

		smsIncomingMessageFlags    = flag.NewFlagSet("incoming-message", flag.ExitOnError)
		smsIncomingMessageBodyFlag = smsIncomingMessageFlags.String("body", "REQUIRED", "")

		smsBulkSMSOptOutFlags    = flag.NewFlagSet("bulk-sms-opt-out", flag.ExitOnError)
		smsBulkSMSOptOutBodyFlag = smsBulkSMSOptOutFlags.String("body", "REQUIRED", "")

		smsSubNotifierFlags    = flag.NewFlagSet("sub-notifier", flag.ExitOnError)
		smsSubNotifierBodyFlag = smsSubNotifierFlags.String("body", "REQUIRED", "")

		ussdFlags = flag.NewFlagSet("ussd", flag.ContinueOnError)

		ussdUssdNotifierFlags    = flag.NewFlagSet("ussd-notifier", flag.ExitOnError)
		ussdUssdNotifierBodyFlag = ussdUssdNotifierFlags.String("body", "REQUIRED", "")

		voiceFlags = flag.NewFlagSet("voice", flag.ContinueOnError)

		voiceVoiceNotifierFlags    = flag.NewFlagSet("voice-notifier", flag.ExitOnError)
		voiceVoiceNotifierBodyFlag = voiceVoiceNotifierFlags.String("body", "REQUIRED", "")

		voiceTransferEventsFlags    = flag.NewFlagSet("transfer-events", flag.ExitOnError)
		voiceTransferEventsBodyFlag = voiceTransferEventsFlags.String("body", "REQUIRED", "")
	)
	airtimeFlags.Usage = airtimeUsage
	airtimeValidationFlags.Usage = airtimeValidationUsage
	airtimeStatusFlags.Usage = airtimeStatusUsage

	healthFlags.Usage = healthUsage
	healthShowFlags.Usage = healthShowUsage

	iotFlags.Usage = iotUsage
	iotIotNotifierFlags.Usage = iotIotNotifierUsage

	paymentsFlags.Usage = paymentsUsage
	paymentsPaymentNotifierFlags.Usage = paymentsPaymentNotifierUsage
	paymentsC2bNotifierFlags.Usage = paymentsC2bNotifierUsage
	paymentsB2cNotifierFlags.Usage = paymentsB2cNotifierUsage

	smsFlags.Usage = smsUsage
	smsDeliveryReportFlags.Usage = smsDeliveryReportUsage
	smsIncomingMessageFlags.Usage = smsIncomingMessageUsage
	smsBulkSMSOptOutFlags.Usage = smsBulkSMSOptOutUsage
	smsSubNotifierFlags.Usage = smsSubNotifierUsage

	ussdFlags.Usage = ussdUsage
	ussdUssdNotifierFlags.Usage = ussdUssdNotifierUsage

	voiceFlags.Usage = voiceUsage
	voiceVoiceNotifierFlags.Usage = voiceVoiceNotifierUsage
	voiceTransferEventsFlags.Usage = voiceTransferEventsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "airtime":
			svcf = airtimeFlags
		case "health":
			svcf = healthFlags
		case "iot":
			svcf = iotFlags
		case "payments":
			svcf = paymentsFlags
		case "sms":
			svcf = smsFlags
		case "ussd":
			svcf = ussdFlags
		case "voice":
			svcf = voiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "airtime":
			switch epn {
			case "validation":
				epf = airtimeValidationFlags

			case "status":
				epf = airtimeStatusFlags

			}

		case "health":
			switch epn {
			case "show":
				epf = healthShowFlags

			}

		case "iot":
			switch epn {
			case "iot-notifier":
				epf = iotIotNotifierFlags

			}

		case "payments":
			switch epn {
			case "payment-notifier":
				epf = paymentsPaymentNotifierFlags

			case "c2b-notifier":
				epf = paymentsC2bNotifierFlags

			case "b2c-notifier":
				epf = paymentsB2cNotifierFlags

			}

		case "sms":
			switch epn {
			case "delivery-report":
				epf = smsDeliveryReportFlags

			case "incoming-message":
				epf = smsIncomingMessageFlags

			case "bulk-sms-opt-out":
				epf = smsBulkSMSOptOutFlags

			case "sub-notifier":
				epf = smsSubNotifierFlags

			}

		case "ussd":
			switch epn {
			case "ussd-notifier":
				epf = ussdUssdNotifierFlags

			}

		case "voice":
			switch epn {
			case "voice-notifier":
				epf = voiceVoiceNotifierFlags

			case "transfer-events":
				epf = voiceTransferEventsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "airtime":
			c := airtimec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "validation":
				endpoint = c.Validation()
				data, err = airtimec.BuildValidationPayload(*airtimeValidationBodyFlag)
			case "status":
				endpoint = c.Status()
				data, err = airtimec.BuildStatusPayload(*airtimeStatusBodyFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data = nil
			}
		case "iot":
			c := iotc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "iot-notifier":
				endpoint = c.IotNotifier()
				data, err = iotc.BuildIotNotifierPayload(*iotIotNotifierBodyFlag)
			}
		case "payments":
			c := paymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "payment-notifier":
				endpoint = c.PaymentNotifier()
				data, err = paymentsc.BuildPaymentNotifierPayload(*paymentsPaymentNotifierBodyFlag)
			case "c2b-notifier":
				endpoint = c.C2bNotifier()
				data, err = paymentsc.BuildC2bNotifierPayload(*paymentsC2bNotifierBodyFlag)
			case "b2c-notifier":
				endpoint = c.B2cNotifier()
				data, err = paymentsc.BuildB2cNotifierPayload(*paymentsB2cNotifierBodyFlag)
			}
		case "sms":
			c := smsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "delivery-report":
				endpoint = c.DeliveryReport()
				data, err = smsc.BuildDeliveryReportPayload(*smsDeliveryReportBodyFlag)
			case "incoming-message":
				endpoint = c.IncomingMessage()
				data, err = smsc.BuildIncomingMessagePayload(*smsIncomingMessageBodyFlag)
			case "bulk-sms-opt-out":
				endpoint = c.BulkSMSOptOut()
				data, err = smsc.BuildBulkSMSOptOutPayload(*smsBulkSMSOptOutBodyFlag)
			case "sub-notifier":
				endpoint = c.SubNotifier()
				data, err = smsc.BuildSubNotifierPayload(*smsSubNotifierBodyFlag)
			}
		case "ussd":
			c := ussdc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "ussd-notifier":
				endpoint = c.UssdNotifier()
				data, err = ussdc.BuildUssdNotifierPayload(*ussdUssdNotifierBodyFlag)
			}
		case "voice":
			c := voicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "voice-notifier":
				endpoint = c.VoiceNotifier()
				data, err = voicec.BuildVoiceNotifierPayload(*voiceVoiceNotifierBodyFlag)
			case "transfer-events":
				endpoint = c.TransferEvents()
				data, err = voicec.BuildTransferEventsPayload(*voiceTransferEventsBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// airtimeUsage displays the usage of the airtime command and its subcommands.
func airtimeUsage() {
	fmt.Fprintf(os.Stderr, `Service is the airtime service interface.
Usage:
    %s [globalflags] airtime COMMAND [flags]

COMMAND:
    validation: Airtime Validation Notifications
    status: Airtime Status Notifications

Additional help:
    %s airtime COMMAND --help
`, os.Args[0], os.Args[0])
}
func airtimeValidationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] airtime validation -body JSON

Airtime Validation Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` airtime validation --body '{
      "amount": 500,
      "currencyCode": "KES",
      "phoneNumber": "+254711XXXYYY",
      "transactionId": "SomeTransactionID"
   }'
`, os.Args[0])
}

func airtimeStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] airtime status -body JSON

Airtime Status Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` airtime status --body '{
      "requestId": "ATQid_SampleTxnId123",
      "status": "Success"
   }'
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the health service interface.
Usage:
    %s [globalflags] health COMMAND [flags]

COMMAND:
    show: Health check endpoint.

Additional help:
    %s health COMMAND --help
`, os.Args[0], os.Args[0])
}
func healthShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] health show

Health check endpoint.

Example:
    `+os.Args[0]+` health show
`, os.Args[0])
}

// iotUsage displays the usage of the iot command and its subcommands.
func iotUsage() {
	fmt.Fprintf(os.Stderr, `Service is the iot service interface.
Usage:
    %s [globalflags] iot COMMAND [flags]

COMMAND:
    iot-notifier: IoT Notifications

Additional help:
    %s iot COMMAND --help
`, os.Args[0], os.Args[0])
}
func iotIotNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] iot iot-notifier -body JSON

IoT Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` iot iot-notifier --body '{
      "payload": "42",
      "topic": "myusername/devicegroup/sensor/id/1/temperature"
   }'
`, os.Args[0])
}

// paymentsUsage displays the usage of the payments command and its subcommands.
func paymentsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the payments service interface.
Usage:
    %s [globalflags] payments COMMAND [flags]

COMMAND:
    payment-notifier: Payment Notifications
    c2b-notifier: C2B Validation Notifications
    b2c-notifier: B2C Validation Notifications

Additional help:
    %s payments COMMAND --help
`, os.Args[0], os.Args[0])
}
func paymentsPaymentNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] payments payment-notifier -body JSON

Payment Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` payments payment-notifier --body '{
      "category": "MobileB2B",
      "clientAccount": "Corrupti ducimus autem cum eum exercitationem.",
      "description": "Hic sequi quis nihil asperiores culpa.",
      "destination": "Eveniet doloribus.",
      "destinationType": "Card",
      "productName": "Molestiae animi officiis.",
      "provider": "Athena",
      "providerChannel": "Velit eveniet est veritatis.",
      "providerFee": "Minus corrupti voluptatem eos.",
      "providerMetadata": "Sunt nemo ex esse eveniet quas.",
      "providerRefId": "Vitae qui qui omnis.",
      "requestMetadata": "Corrupti corrupti nobis corporis qui.",
      "source": "Fugiat quod nemo natus.",
      "sourceType": "PhoneNumber",
      "status": "Success",
      "transactionDate": "Est quibusdam hic ut.",
      "transactionFee": "Quas est nostrum incidunt impedit vel.",
      "transactionId": "In eum.",
      "value": "Ut eveniet."
   }'
`, os.Args[0])
}

func paymentsC2bNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] payments c2b-notifier -body JSON

C2B Validation Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` payments c2b-notifier --body '{
      "clientAccount": "Culpa soluta quibusdam corporis rerum deleniti.",
      "phoneNumber": "Sequi non sit aliquid.",
      "productName": "Magni est aspernatur qui velit.",
      "provider": "TigoTanzania",
      "providerMetadata": {
         "Molestias laborum magnam numquam nostrum accusamus.": "Aliquam ut vel."
      },
      "value": "Provident nam non est quia et nobis."
   }'
`, os.Args[0])
}

func paymentsB2cNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] payments b2c-notifier -body JSON

B2C Validation Notifications
    -body JSON: 

Example:
    `+os.Args[0]+` payments b2c-notifier --body '{
      "amount": 500,
      "currencyCode": "KES",
      "metadata": {
         "Sit sit id voluptatibus occaecati nostrum.": "Fugiat sunt sed provident eos sunt."
      },
      "phoneNumber": "+254711XXXYYY",
      "sourceIpAddress": "12.34.56.78",
      "transactionId": "SomeTransactionID"
   }'
`, os.Args[0])
}

// smsUsage displays the usage of the sms command and its subcommands.
func smsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sms service interface.
Usage:
    %s [globalflags] sms COMMAND [flags]

COMMAND:
    delivery-report: Sent whenever an MSP confirms or rejects delivery of a message.
    incoming-message: Sent whenever a message is sent to any of your registered shortcodes.
    bulk-sms-opt-out: Sent whenever a user opts out of receiving messages from your alphanumeric sender ID
    sub-notifier: Sent whenever someone subscribes or unsubscribes from any of your premium SMS products.

Additional help:
    %s sms COMMAND --help
`, os.Args[0], os.Args[0])
}
func smsDeliveryReportUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sms delivery-report -body JSON

Sent whenever an MSP confirms or rejects delivery of a message.
    -body JSON: 

Example:
    `+os.Args[0]+` sms delivery-report --body '{
      "failureReason": "UserAccountSuspended",
      "id": "Consequatur et dicta.",
      "networkCode": "64110",
      "phoneNumber": "Recusandae perspiciatis excepturi reiciendis est quasi est.",
      "retryCount": "Non quo omnis consequatur vero.",
      "status": "Buffered"
   }'
`, os.Args[0])
}

func smsIncomingMessageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sms incoming-message -body JSON

Sent whenever a message is sent to any of your registered shortcodes.
    -body JSON: 

Example:
    `+os.Args[0]+` sms incoming-message --body '{
      "date": "1977-01-31",
      "from": "Velit earum est.",
      "id": "Illo voluptate iste voluptate unde.",
      "linkId": "Vitae autem adipisci sed labore reprehenderit est.",
      "networkCode": "64007",
      "text": "Aut quas quia laboriosam vitae dolor hic.",
      "to": "Eligendi suscipit recusandae libero natus cupiditate libero."
   }'
`, os.Args[0])
}

func smsBulkSMSOptOutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sms bulk-sms-opt-out -body JSON

Sent whenever a user opts out of receiving messages from your alphanumeric sender ID
    -body JSON: 

Example:
    `+os.Args[0]+` sms bulk-sms-opt-out --body '{
      "phoneNumber": "Ut vitae sit.",
      "senderId": "Enim neque."
   }'
`, os.Args[0])
}

func smsSubNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sms sub-notifier -body JSON

Sent whenever someone subscribes or unsubscribes from any of your premium SMS products.
    -body JSON: 

Example:
    `+os.Args[0]+` sms sub-notifier --body '{
      "keyword": "Magni molestiae molestiae esse.",
      "phoneNumber": "Ut perferendis sit ratione expedita.",
      "shortCode": "Pariatur aut omnis.",
      "updateType": "deletion"
   }'
`, os.Args[0])
}

// ussdUsage displays the usage of the ussd command and its subcommands.
func ussdUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ussd service interface.
Usage:
    %s [globalflags] ussd COMMAND [flags]

COMMAND:
    ussd-notifier: Callback URL that sends request data our App using HTTP POST.

Additional help:
    %s ussd COMMAND --help
`, os.Args[0], os.Args[0])
}
func ussdUssdNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ussd ussd-notifier -body JSON

Callback URL that sends request data our App using HTTP POST.
    -body JSON: 

Example:
    `+os.Args[0]+` ussd ussd-notifier --body '{
      "networkCode": "Provident ut.",
      "phoneNumber": "Et porro soluta.",
      "serviceCode": "Atque maiores asperiores.",
      "sessionId": "Itaque quam saepe ex.",
      "text": "Rerum ducimus at voluptas ipsa."
   }'
`, os.Args[0])
}

// voiceUsage displays the usage of the voice command and its subcommands.
func voiceUsage() {
	fmt.Fprintf(os.Stderr, `Service is the voice service interface.
Usage:
    %s [globalflags] voice COMMAND [flags]

COMMAND:
    voice-notifier: Voice Notification delivered to our callback URL
    transfer-events: Event Notifications sent from AT after call transfer initiated.

Additional help:
    %s voice COMMAND --help
`, os.Args[0], os.Args[0])
}
func voiceVoiceNotifierUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] voice voice-notifier -body JSON

Voice Notification delivered to our callback URL
    -body JSON: 

Example:
    `+os.Args[0]+` voice voice-notifier --body '{
      "amount": "Optio alias iure est.",
      "callSessionState": "Qui reiciendis in sed consequatur eos.",
      "callStartTime": "Saepe veniam.",
      "callerCountryCode": "Deserunt velit praesentium quos id repellat.",
      "callerNumber": "+254711XXXYYY",
      "currencyCode": "Suscipit deleniti beatae.",
      "destinationNumber": "+254711XXXYYY",
      "dialDestinationNumber": "Repellendus est suscipit aperiam in aut.",
      "dialDurationInSeconds": "Magnam dolores nihil eligendi perspiciatis dolore.",
      "dialStartTime": "Aspernatur est ut doloribus architecto est.",
      "direction": "Sunt vero totam sint qui.",
      "dtmfDigits": "Ut assumenda dignissimos cupiditate eius illo qui.",
      "durationInSeconds": "Quibusdam optio facilis accusantium assumenda eum nemo.",
      "hangupCause": "SERVICE_UNAVAILABLE",
      "isActive": "Voluptas fugiat sed numquam iure.",
      "recordingUrl": "Enim beatae ut velit porro.",
      "sessionId": "Nobis nostrum et quaerat quaerat accusantium earum."
   }'
`, os.Args[0])
}

func voiceTransferEventsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] voice transfer-events -body JSON

Event Notifications sent from AT after call transfer initiated.
    -body JSON: 

Example:
    `+os.Args[0]+` voice transfer-events --body '{
      "callSessionState": "Transferred",
      "callTransferHangupCause": "InvalidPhoneNumber",
      "callTransferParam": "Unde quos mollitia.",
      "callTransferState": " Active",
      "callTransferredToNumber": "Doloremque velit repellendus perferendis tempora veritatis quidem.",
      "isActive": "1",
      "status": "Success"
   }'
`, os.Args[0])
}
