package design

import (
	. "goa.design/goa/v3/dsl"
	_ "goa.design/plugins/v3/docs"      // Generates documentation
	_ "goa.design/plugins/v3/goakit"    // Enables goakit
	_ "goa.design/plugins/v3/zaplogger" // Enables ZapLogger Plugin
)

// Payment Notifications
// The Payment API sends a notification when a specific event happens.
// To receive these notifications you need to setup a callback URL
// depending on the type of notification.

// BankCheckout: Sent once the provided bank confirms or rejects
// the checkout request, or once the checkout request expires.
//
// CardCheckout: Sent once the card provider confirms or rejects
// the checkout request, or once the checkout request expires.
//
// MobileCheckout: Sent once the mobile subscriber confirms or
// rejects the checkout request, or once the checkout request expires.
//
// MobileC2B: Sent once funds are moved from the mobile subscriber’s
// account to your payment wallet.
//
// MobileB2C: Sent once funds are successfully moved from your payment
// wallet to the mobile subscriber’s account.
// If we are not able to complete the transaction, we will refund your
// payment wallet with the value of the transaction, and also refund
// your Africa’s Talking Stash with any transaction Fees.
//
// MobileB2B: Sent once funds are successfully moved from your payment
// wallet to the recipeints business account.
// If we are not able to complete the transaction, we will refund your
// payment wallet with the value of the transaction, and also refund
// your Africa’s Talking Stash with any transaction Fees.
//
// BankTransfer: Sent once funds are successfully moved from your
// payment wallet to the provided bank account account.
// If we are not able to complete the transaction, we will refund
// your payment wallet with the value of the transaction, and also
// refund your Africa’s Talking Stash with any transaction Fees.
//
// WalletTransfer: Sent once funds are successfully moved from your
// payment wallet to the target payment wallet.
// UserStashTopup: Sent once funds are successfully moved from your
// payment wallet to your Africa’s Talking Stash.

var PaymentNotification = Type("PaymentNotification ", func() {
	Attribute("transactionId", String, func() {
		Description("Unique transactionId generated for every payment.")
	})
	Attribute("category", String, func() {
		Description("Category of the payment.")
		Enum(

			// For Consumer-to-Business payments
			// initiated by your application
			// through our Bank Checkout APIs.
			"BankCheckout",

			// For Consumer-to-Business payments
			// initiated by your application through
			// our Card Checkout APIs.
			"CardCheckout",

			// For Consumer-to-Business payments
			// initiated by your application through
			// our Mobile Checkout APIs
			"MobileCheckout",

			//  For Consumer-to-Business payments
			//  initiated by a mobile subscriber
			//  through their device
			//  (e.g using a paybill number)
			"MobileC2B",

			// For Business-to-Consumer payments
			// initiated by your application through
			// our B2C APIs
			"MobileB2C",

			// For Business-to-Business payments initiated
			// by your application through our B2B APIs
			"MobileB2B",

			// For Business-to-Business payments initiated
			// by your application through our Bank Transfer APIs
			"BankTransfer",

			// For Wallet-to-Wallet payments initiated by your
			// application through our Wallet Transfer APIs
			"WalletTransfer",

			//  For Wallet-to-application stash payments initiated
			//  by your application through our User Stash Topup APIs
			"UserStashTopup",
		)
	})
	Attribute("provider", String, func() {
		Description("Payment provider that facilitated this transaction.")
		Enum(

			// This identifies payments facilitated
			// by Safaricom’s M-PESA’s APIs
			"Mpesa",

			// This identifies payments facilitated
			// by Segovia’s APIs
			"Segovia",

			// This identifies payments facilitated
			// by Flutterwaves’s APIs
			"Flutterwave",

			// This identifies payments facilitated
			// by our administrative APIs
			"Admin",

			// This identifies payments facilitated
			// by our Developer Sandbox.
			// This is not available in our production systems.
			"Athena",
		)
	})

	// This value is only provided for successful transactions.
	Attribute("providerRefId", String, func() {
		Description("Unique ID generated by the payment provider for this transaction.")
	})

	// This could, for example, be the Mobile Provider’s Paybill
	// or Buy Goods number that belongs to your organization.
	Attribute("providerChannel", String, func() {
		Description("Name or number of channel that used to facilitate this payment.")
	})

	// This value will only be present for Mobile C2B transactions.
	Attribute("clientAccount", String, func() {
		Description("Account name used by a mobile subscriber to initiate this transaction.")
	})
	Attribute("productName", String, func() {
		Description("Africa’s Talking Payment Product used to facilitate this transaction.")
	})
	Attribute("sourceType", String, func() {
		Description("Type of party providing the funds for this transaction (the Debit Party).")
		Enum(

			// Indicates that the funds are being provided
			// by a mobile subscriber through their mobile device.
			// This is the case for Mobile Checkout and Mobile C2B Transactions
			"PhoneNumber",

			// Indicates that the funds are being provided
			// by a customer through their Bank Account.
			// This is the case for Bank Checkout Transactions
			"BankAccount",

			// Indicates that the funds are being provided
			// by a customer through their Debit or Credit Card.
			// This is the case for Card Checkout Transactions
			"Card",

			// Indicates that the funds are being provided by
			// your Africa’s Talking Wallet through one of your products.
			// This is the case for Mobile B2C Transactions
			"Wallet",
		)
	})

	// This value will contain either the phone number, bank account
	// number or a card number of the customer who is sending funds
	// to your application, or the special value PaymentWallet that
	// identifies your Africa’s Talking Payment Wallet.
	Attribute("source", String, func() {
		Description("Unique identifier of the party that is providing the funds for this transaction.")
	})
	Attribute("destinationType", String, func() {
		Description("Unique identifier of the party receiving funds in this transaction (the Credit Party).")
		Enum(

			// Indicates that the funds are being provided by
			// a mobile subscriber through their mobile device.
			// This is the case for Mobile Checkout and Mobile C2B Transactions
			"PhoneNumber",

			// Indicates that the funds are being provided by
			// a customer through their Bank Account.
			// This is the case for Bank Checkout Transactions
			"BankAccount",

			// Indicates that the funds are being provided by
			// a customer through their Debit or Credit Card.
			// This is the case for Card Checkout Transactions
			"Card",

			// Indicates that the funds are being provided by
			// your Africa’s Talking Wallet through one of your products.
			// This is the case for Mobile B2C Transactions
			"Wallet",
		)
	})

	// This value will contain either a phone number, bank account
	// number or a card number of the customer who is sending funds
	// to your application, or the special value PaymentWallet that
	// identifies your Africa’s Talking Payment Wallet.
	Attribute("destination", String, func() {
		Description("Unique identifier of the party  receiving the funds for this transaction.")
	})

	// The format of this string is:
	// (3-digit Currency Code)(space)(Decimal Value)
	// e.g KES 1.50
	Attribute("value", String, func() {
		Description("Value being exchanged in this transaction.")
	})

	// The format of this string is:
	// (3-digit Currency Code)(space)(Decimal Value)
	// e.g KES 1.50
	// Please note: The transaction fee will be deducted
	// from your Africa’s Talking Stash NOT your payment wallet.
	Attribute("transactionFee", String, func() {
		Description("Transaction fee charged by Africa’s Talking for this transaction.")
	})

	// An example would be the fee charged to the owner of a Paybill
	// by a Mobile Money Provider in order to facilitate a C2B transaction.
	// The format of this string is:
	// (3-digit Currency Code)(space)(Decimal Value)
	// e.g KES 1.50
	// This value is only present in the case where a transaction was
	// successful and the provider fee is being passed on to your application.
	// Please Note: This fee will also be deducted from the amount to be
	// credited to your payment wallet.
	Attribute("providerFee", String, func() {
		Description("Fee charged by a payment provider to facilitate this transaction.")
	})
	Attribute("status", String, func() {
		Description("The final status of this transaction")
		Enum("Success", "Failed")
	})

	// Includes a more detailed failure reason in the case of failures.
	Attribute("description", String, func() {
		Description("A detailed description of this transaction.")
	})

	// You can use this field to reconcile transactions with your
	// implementation by, for example, sending in KYC data or internal
	// ids from your application that are linked to this transaction.
	// The map will be empty for transactions that are not initiated
	// by your application (such as Mobile C2B transactions).
	Attribute("requestMetadata", func() {
		Description("Any metadata that was sent by your application when it initiated this transaction.")
	})

	// This could contain, for example, KYC data associated with a C2B
	// transaction or any additional regulatory information that is
	// passed to our APIs by payment providers.
	// The map will be empty in the case where a payment is not successful,
	// or in the case where there is no additional data to provide.
	Attribute("providerMetadata", func() {
		Description("Any additional data that we receive from a payment provider for a particular transaction.")
	})

	// This is only provided for successful transactions
	Attribute("transactionDate", String, func() {
		Description("The date and time when a successful transaction was completed.")
	})
	Required(
		"transactionId",
		"category",
		"provider",
		"providerChannel",
		"productName",
		"sourceType",
		"source",
		"destinationType",
		"destination",
		"value",
		"status",
		"description",
		"requestMetadata",
		"providerMetadata",
	)
})

// Mobile C2B
// Mobile Consumer To Business (C2B) functionality allows your application
// to receive payments that are initiated by a mobile subscriber.
// This is typically achieved by distributing a PayBill or BuyGoods number
// (and optionally an account number) that clients can use to make
// payments from their mobile devices.
//
// C2B functionality is implemented through validation and notification
// callback URLs configured for each product in your account.
// Where available, validation is usually the first callback that is
// invoked in order to complete a C2B transaction.
// This allows the detection of some error cases (for example wrong
// account number or amount), thereby reducing the need to reverse these transactions.
//
// Notification is the final step in completing a transaction.
// The mechanism for notifications is the same as for all other payment categories,
// and is discussed at length in this section.
// In this section we will focus on how you can enable C2B validation in your account.

// Validation Notification
// You can enable C2B validation for your payment product by configuring
// a validation URL in your account. The POST request that we submit to
// your validation callback URL will contain a JSON-encoded object that
// has the following parameters:
var C2BValidationNotification = Type("C2BValidationNotification", func() {
	Attribute("provider", String, func() {
		Description("Payment provider that is facilitating this transaction")
		Enum(
			// This identifies payments facilitated by Safaricom’s M-PESA’s APIs
			"Mpesa",

			// Payments facilitated by Tigo’s TigoPesa APIs
			"TigoTanzania",

			// This identifies payments facilitated by our Developer Sandbox.
			// This is obviously not available on our production systems
			"Athena",
		)
	})

	// This value will only be present for Mobile C2B transactions.
	Attribute("clientAccount", String, func() {
		Description("Account name used by a mobile subscriber to initiate this transaction.")
	})
	Attribute("productName", String, func() {
		Description("Identifies the Africa’s Talking Payment Product used to facilitate this transaction.")
	})
	Attribute("phoneNumber", String, func() {
		Description("Phone number of the mobile subscriber who is initiating the C2B transaction.")
	})

	// The format of this string is:
	// (3-digit currencyCode)(space)(Decimal Value).
	// An example would be: KES 100.50 or UGX 3500.00
	Attribute("value", String, func() {
		Description("Value being exchanged in this transaction")
	})

	// This could contain, for example, KYC data associated with the
	// transaction or any additional regulatory information that is
	// passed to our APIs by payment providers.
	// The map will be empty in the case where there is no additional data to provide.
	Attribute("providerMetadata", MapOf(String, String), func() {
		Description("Additional data received from a payment provider for a particular transaction")
	})
	Required(
		"provider",
		"productName",
		"phoneNumber",
		"value",
		"providerMetadata",
	)
})

// B2C Validation Notification
// The mobile B2C API provides optional functionality to validate
// B2C requests from your application.
// To receive these notifications you need to setup a B2C validation
// callback URL on your payment product.
// From the dashboard select Payments -> Products -> Actions -> Callback.
//
// Validation notification content
// B2C validation notifications are sent as POST requests to the validation
// callback URL provided and contain the following parameters:
var B2CValidationNotificationPayload = Type("B2CValidationNotificationPayload", func() {
	Attribute("transactionId", String, func() {
		Description("The transaction id within Africa’s Talking.")
		Example("SomeTransactionID")
	})
	Attribute("phoneNumber", String, func() {
		Description("The phone number of the mobile subscriber receiving the B2C payment.")
		Example("+254711XXXYYY")
	})
	Attribute("currencyCode", String, func() {
		Description("The 3-digist ISO format currency for the value of this transaction")
		Example("KES")
	})
	Attribute("amount", UInt64, func() {
		Description("Amount - in the provided currency - that the client will receive.")
		Example(500.00)
	})
	Attribute("sourceIpAddress", String, func() {
		Description("The IPv4 address that initiated the B2C transaction.")
		Example("12.34.56.78")
	})
	Attribute("metadata", MapOf(String, String), func() {
		Description("A map of metadata associated with this request.")
	})
})

// Validation notification response
// Once you receive a validation callback notification you’ll
// be expected to send back a JSON response that marks the
// transaction as Validated or Failed.
// If validated we will proceed to send the B2C transaction,
// if failed, we will block the B2C transaction.
var B2CValidationNotificationResponse = Type("B2CValidationNotificationResponse", func() {
	Attribute("status", String, func() {
		Enum("Validated", "Failed")
		Example("Validated")
	})
})
