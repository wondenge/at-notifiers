// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	africastalking "github.com/wondenge/at-notifiers/gen/africastalking"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the africastalking service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	SmsDeliveryReport     http.Handler
	SmsIncomingMessage    http.Handler
	SmsBulkOptout         http.Handler
	SmsSubscription       http.Handler
	VoiceNotification     http.Handler
	TransferEvent         http.Handler
	UssdNotifier          http.Handler
	ValidationNotifier    http.Handler
	StatusNotifier        http.Handler
	PaymentNotifier       http.Handler
	C2bValidationNotifier http.Handler
	B2cValidationNotifier http.Handler
	IotNotifier           http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the africastalking service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *africastalking.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SmsDeliveryReport", "POST", "/callbacks/africastalking/sms/deliveryreport"},
			{"SmsIncomingMessage", "POST", "/callbacks/africastalking/sms/incomingmessage"},
			{"SmsBulkOptout", "POST", "/callbacks/africastalking/sms/bulksmsoptout"},
			{"SmsSubscription", "POST", "/callbacks/africastalking/sms/subscription"},
			{"VoiceNotification", "POST", "/callbacks/africastalking/voice/notifications"},
			{"TransferEvent", "POST", "/callbacks/africastalking/voice/transferevents"},
			{"UssdNotifier", "POST", "/callbacks/africastalking/ussd/sessions"},
			{"ValidationNotifier", "POST", "/callbacks/africastalking/airtime/validation"},
			{"StatusNotifier", "POST", "/callbacks/africastalking/airtime/status"},
			{"PaymentNotifier", "POST", "/callbacks/africastalking/payments/events"},
			{"C2bValidationNotifier", "POST", "/callbacks/africastalking/payments/c2b/validation"},
			{"B2cValidationNotifier", "POST", "/callbacks/africastalking/payments/b2c/validation"},
			{"IotNotifier", "POST", "/callbacks/africastalking/iot/events"},
		},
		SmsDeliveryReport:     NewSmsDeliveryReportHandler(e.SmsDeliveryReport, mux, decoder, encoder, errhandler, formatter),
		SmsIncomingMessage:    NewSmsIncomingMessageHandler(e.SmsIncomingMessage, mux, decoder, encoder, errhandler, formatter),
		SmsBulkOptout:         NewSmsBulkOptoutHandler(e.SmsBulkOptout, mux, decoder, encoder, errhandler, formatter),
		SmsSubscription:       NewSmsSubscriptionHandler(e.SmsSubscription, mux, decoder, encoder, errhandler, formatter),
		VoiceNotification:     NewVoiceNotificationHandler(e.VoiceNotification, mux, decoder, encoder, errhandler, formatter),
		TransferEvent:         NewTransferEventHandler(e.TransferEvent, mux, decoder, encoder, errhandler, formatter),
		UssdNotifier:          NewUssdNotifierHandler(e.UssdNotifier, mux, decoder, encoder, errhandler, formatter),
		ValidationNotifier:    NewValidationNotifierHandler(e.ValidationNotifier, mux, decoder, encoder, errhandler, formatter),
		StatusNotifier:        NewStatusNotifierHandler(e.StatusNotifier, mux, decoder, encoder, errhandler, formatter),
		PaymentNotifier:       NewPaymentNotifierHandler(e.PaymentNotifier, mux, decoder, encoder, errhandler, formatter),
		C2bValidationNotifier: NewC2bValidationNotifierHandler(e.C2bValidationNotifier, mux, decoder, encoder, errhandler, formatter),
		B2cValidationNotifier: NewB2cValidationNotifierHandler(e.B2cValidationNotifier, mux, decoder, encoder, errhandler, formatter),
		IotNotifier:           NewIotNotifierHandler(e.IotNotifier, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "africastalking" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SmsDeliveryReport = m(s.SmsDeliveryReport)
	s.SmsIncomingMessage = m(s.SmsIncomingMessage)
	s.SmsBulkOptout = m(s.SmsBulkOptout)
	s.SmsSubscription = m(s.SmsSubscription)
	s.VoiceNotification = m(s.VoiceNotification)
	s.TransferEvent = m(s.TransferEvent)
	s.UssdNotifier = m(s.UssdNotifier)
	s.ValidationNotifier = m(s.ValidationNotifier)
	s.StatusNotifier = m(s.StatusNotifier)
	s.PaymentNotifier = m(s.PaymentNotifier)
	s.C2bValidationNotifier = m(s.C2bValidationNotifier)
	s.B2cValidationNotifier = m(s.B2cValidationNotifier)
	s.IotNotifier = m(s.IotNotifier)
}

// Mount configures the mux to serve the africastalking endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSmsDeliveryReportHandler(mux, h.SmsDeliveryReport)
	MountSmsIncomingMessageHandler(mux, h.SmsIncomingMessage)
	MountSmsBulkOptoutHandler(mux, h.SmsBulkOptout)
	MountSmsSubscriptionHandler(mux, h.SmsSubscription)
	MountVoiceNotificationHandler(mux, h.VoiceNotification)
	MountTransferEventHandler(mux, h.TransferEvent)
	MountUssdNotifierHandler(mux, h.UssdNotifier)
	MountValidationNotifierHandler(mux, h.ValidationNotifier)
	MountStatusNotifierHandler(mux, h.StatusNotifier)
	MountPaymentNotifierHandler(mux, h.PaymentNotifier)
	MountC2bValidationNotifierHandler(mux, h.C2bValidationNotifier)
	MountB2cValidationNotifierHandler(mux, h.B2cValidationNotifier)
	MountIotNotifierHandler(mux, h.IotNotifier)
}

// MountSmsDeliveryReportHandler configures the mux to serve the
// "africastalking" service "sms_delivery_report" endpoint.
func MountSmsDeliveryReportHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/deliveryreport", f)
}

// NewSmsDeliveryReportHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "sms_delivery_report"
// endpoint.
func NewSmsDeliveryReportHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSmsDeliveryReportRequest(mux, decoder)
		encodeResponse = EncodeSmsDeliveryReportResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sms_delivery_report")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSmsIncomingMessageHandler configures the mux to serve the
// "africastalking" service "sms_incoming_message" endpoint.
func MountSmsIncomingMessageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/incomingmessage", f)
}

// NewSmsIncomingMessageHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "sms_incoming_message"
// endpoint.
func NewSmsIncomingMessageHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSmsIncomingMessageRequest(mux, decoder)
		encodeResponse = EncodeSmsIncomingMessageResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sms_incoming_message")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSmsBulkOptoutHandler configures the mux to serve the "africastalking"
// service "sms_bulk_optout" endpoint.
func MountSmsBulkOptoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/bulksmsoptout", f)
}

// NewSmsBulkOptoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "sms_bulk_optout" endpoint.
func NewSmsBulkOptoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSmsBulkOptoutRequest(mux, decoder)
		encodeResponse = EncodeSmsBulkOptoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sms_bulk_optout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSmsSubscriptionHandler configures the mux to serve the "africastalking"
// service "sms_subscription" endpoint.
func MountSmsSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/subscription", f)
}

// NewSmsSubscriptionHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "sms_subscription" endpoint.
func NewSmsSubscriptionHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSmsSubscriptionRequest(mux, decoder)
		encodeResponse = EncodeSmsSubscriptionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sms_subscription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVoiceNotificationHandler configures the mux to serve the
// "africastalking" service "voice_notification" endpoint.
func MountVoiceNotificationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/voice/notifications", f)
}

// NewVoiceNotificationHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "voice_notification" endpoint.
func NewVoiceNotificationHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVoiceNotificationRequest(mux, decoder)
		encodeResponse = EncodeVoiceNotificationResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "voice_notification")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransferEventHandler configures the mux to serve the "africastalking"
// service "transfer_event" endpoint.
func MountTransferEventHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/voice/transferevents", f)
}

// NewTransferEventHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "transfer_event" endpoint.
func NewTransferEventHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransferEventRequest(mux, decoder)
		encodeResponse = EncodeTransferEventResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "transfer_event")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUssdNotifierHandler configures the mux to serve the "africastalking"
// service "ussd_notifier" endpoint.
func MountUssdNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/ussd/sessions", f)
}

// NewUssdNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "ussd_notifier" endpoint.
func NewUssdNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUssdNotifierRequest(mux, decoder)
		encodeResponse = EncodeUssdNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ussd_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountValidationNotifierHandler configures the mux to serve the
// "africastalking" service "validation_notifier" endpoint.
func MountValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/airtime/validation", f)
}

// NewValidationNotifierHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "validation_notifier"
// endpoint.
func NewValidationNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeValidationNotifierRequest(mux, decoder)
		encodeResponse = EncodeValidationNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "validation_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStatusNotifierHandler configures the mux to serve the "africastalking"
// service "status_notifier" endpoint.
func MountStatusNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/airtime/status", f)
}

// NewStatusNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "status_notifier" endpoint.
func NewStatusNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStatusNotifierRequest(mux, decoder)
		encodeResponse = EncodeStatusNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "status_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPaymentNotifierHandler configures the mux to serve the "africastalking"
// service "payment_notifier" endpoint.
func MountPaymentNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/events", f)
}

// NewPaymentNotifierHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "payment_notifier" endpoint.
func NewPaymentNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePaymentNotifierRequest(mux, decoder)
		encodeResponse = EncodePaymentNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "payment_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountC2bValidationNotifierHandler configures the mux to serve the
// "africastalking" service "c2b_validation_notifier" endpoint.
func MountC2bValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/c2b/validation", f)
}

// NewC2bValidationNotifierHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "c2b_validation_notifier"
// endpoint.
func NewC2bValidationNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeC2bValidationNotifierRequest(mux, decoder)
		encodeResponse = EncodeC2bValidationNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "c2b_validation_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountB2cValidationNotifierHandler configures the mux to serve the
// "africastalking" service "b2c_validation_notifier" endpoint.
func MountB2cValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/b2c/validation", f)
}

// NewB2cValidationNotifierHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "b2c_validation_notifier"
// endpoint.
func NewB2cValidationNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeB2cValidationNotifierRequest(mux, decoder)
		encodeResponse = EncodeB2cValidationNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "b2c_validation_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIotNotifierHandler configures the mux to serve the "africastalking"
// service "iot_notifier" endpoint.
func MountIotNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/iot/events", f)
}

// NewIotNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "iot_notifier" endpoint.
func NewIotNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIotNotifierRequest(mux, decoder)
		encodeResponse = EncodeIotNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "iot_notifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
