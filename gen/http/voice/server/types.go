// Code generated by goa v3.1.3, DO NOT EDIT.
//
// voice HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	voice "github.com/wondenge/at-notifiers/gen/voice"
	goa "goa.design/goa/v3/pkg"
)

// VoiceNotifierRequestBody is the type of the "voice" service "voiceNotifier"
// endpoint HTTP request body.
type VoiceNotifierRequestBody struct {
	// Lets us know whether the call is in session state
	IsActive *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	// A unique identifier generated during each call session
	SessionID *string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
	// Whether this is an inbound or outbound call
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// Africaâ€™s Talking phone number, in international format
	DestinationNumber *string `form:"destinationNumber,omitempty" json:"destinationNumber,omitempty" xml:"destinationNumber,omitempty"`
	// The phone number of the phone user in the call, in international format.
	CallerNumber *string `form:"callerNumber,omitempty" json:"callerNumber,omitempty" xml:"callerNumber,omitempty"`
	// The code of the country the callerNumber is calling from.
	CallerCountryCode *string `form:"callerCountryCode,omitempty" json:"callerCountryCode,omitempty" xml:"callerCountryCode,omitempty"`
	// The time the call began.
	CallStartTime *string `form:"callStartTime,omitempty" json:"callStartTime,omitempty" xml:"callStartTime,omitempty"`
	// The digits that a user enters in response to a getDigits request
	DtmfDigits *string `form:"dtmfDigits,omitempty" json:"dtmfDigits,omitempty" xml:"dtmfDigits,omitempty"`
	// The URL of the recording made for this call
	RecordingURL *string `form:"recordingUrl,omitempty" json:"recordingUrl,omitempty" xml:"recordingUrl,omitempty"`
	// The duration of the call in seconds.
	DurationInSeconds *string `form:"durationInSeconds,omitempty" json:"durationInSeconds,omitempty" xml:"durationInSeconds,omitempty"`
	// The currency used to bill this call (e.g KES, USD, GBP).
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// The total cost of the call.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// The final status of the call.
	CallSessionState *string `form:"callSessionState,omitempty" json:"callSessionState,omitempty" xml:"callSessionState,omitempty"`
	// The number which a call was forwarded to if the Dial action was used.
	DialDestinationNumber *string `form:"dialDestinationNumber,omitempty" json:"dialDestinationNumber,omitempty" xml:"dialDestinationNumber,omitempty"`
	// The duration of the dialed call if the Dial action was used.
	DialDurationInSeconds *string `form:"dialDurationInSeconds,omitempty" json:"dialDurationInSeconds,omitempty" xml:"dialDurationInSeconds,omitempty"`
	// The time the dial action began if the Dial action was used.
	DialStartTime *string `form:"dialStartTime,omitempty" json:"dialStartTime,omitempty" xml:"dialStartTime,omitempty"`
	// The reason a call could have ended
	HangupCause *string `form:"hangupCause,omitempty" json:"hangupCause,omitempty" xml:"hangupCause,omitempty"`
}

// TransferEventsRequestBody is the type of the "voice" service
// "transferEvents" endpoint HTTP request body.
type TransferEventsRequestBody struct {
	CallSessionState *string `form:"callSessionState,omitempty" json:"callSessionState,omitempty" xml:"callSessionState,omitempty"`
	IsActive         *string `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	Status           *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// +2347XXXXXXXXX:20, (20 is the duration in seconds)
	CallTransferParam *string `form:"callTransferParam,omitempty" json:"callTransferParam,omitempty" xml:"callTransferParam,omitempty"`
	// Number call was transferred to
	CallTransferredToNumber *string `form:"callTransferredToNumber,omitempty" json:"callTransferredToNumber,omitempty" xml:"callTransferredToNumber,omitempty"`
	CallTransferState       *string `form:"callTransferState,omitempty" json:"callTransferState,omitempty" xml:"callTransferState,omitempty"`
	CallTransferHangupCause *string `form:"callTransferHangupCause,omitempty" json:"callTransferHangupCause,omitempty" xml:"callTransferHangupCause,omitempty"`
}

// NewVoiceNotifierVoiceNotification builds a voice service voiceNotifier
// endpoint payload.
func NewVoiceNotifierVoiceNotification(body *VoiceNotifierRequestBody) *voice.VoiceNotification {
	v := &voice.VoiceNotification{
		SessionID:             body.SessionID,
		Direction:             body.Direction,
		DestinationNumber:     body.DestinationNumber,
		CallerNumber:          body.CallerNumber,
		CallerCountryCode:     body.CallerCountryCode,
		CallStartTime:         body.CallStartTime,
		DtmfDigits:            body.DtmfDigits,
		RecordingURL:          body.RecordingURL,
		DurationInSeconds:     body.DurationInSeconds,
		CurrencyCode:          body.CurrencyCode,
		Amount:                body.Amount,
		CallSessionState:      body.CallSessionState,
		DialDestinationNumber: body.DialDestinationNumber,
		DialDurationInSeconds: body.DialDurationInSeconds,
		DialStartTime:         body.DialStartTime,
		HangupCause:           body.HangupCause,
	}
	if body.IsActive != nil {
		v.IsActive = *body.IsActive
	}
	if body.IsActive == nil {
		v.IsActive = "0"
	}

	return v
}

// NewTransferEventsCallTransferEvent builds a voice service transferEvents
// endpoint payload.
func NewTransferEventsCallTransferEvent(body *TransferEventsRequestBody) *voice.CallTransferEvent {
	v := &voice.CallTransferEvent{
		CallSessionState:        body.CallSessionState,
		Status:                  body.Status,
		CallTransferParam:       body.CallTransferParam,
		CallTransferredToNumber: body.CallTransferredToNumber,
		CallTransferState:       body.CallTransferState,
		CallTransferHangupCause: body.CallTransferHangupCause,
	}
	if body.IsActive != nil {
		v.IsActive = *body.IsActive
	}
	if body.IsActive == nil {
		v.IsActive = "1"
	}

	return v
}

// ValidateVoiceNotifierRequestBody runs the validations defined on
// VoiceNotifierRequestBody
func ValidateVoiceNotifierRequestBody(body *VoiceNotifierRequestBody) (err error) {
	if body.HangupCause != nil {
		if !(*body.HangupCause == "NORMAL_CLEARING" || *body.HangupCause == "CALL_REJECTED" || *body.HangupCause == "NORMAL_TEMPORARY_FAILURE" || *body.HangupCause == "RECOVERY_ON_TIMER_EXPIRE" || *body.HangupCause == "ORIGINATOR_CANCEL" || *body.HangupCause == "LOSE_RACE" || *body.HangupCause == "USER_BUSY" || *body.HangupCause == "NO_ANSWER" || *body.HangupCause == "NO_USER_RESPONSE" || *body.HangupCause == "SUBSCRIBER_ABSENT" || *body.HangupCause == "SERVICE_UNAVAILABLE" || *body.HangupCause == "USER_NOT_REGISTERED" || *body.HangupCause == "UNALLOCATED_NUMBER" || *body.HangupCause == "UNSPECIFIED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.hangupCause", *body.HangupCause, []interface{}{"NORMAL_CLEARING", "CALL_REJECTED", "NORMAL_TEMPORARY_FAILURE", "RECOVERY_ON_TIMER_EXPIRE", "ORIGINATOR_CANCEL", "LOSE_RACE", "USER_BUSY", "NO_ANSWER", "NO_USER_RESPONSE", "SUBSCRIBER_ABSENT", "SERVICE_UNAVAILABLE", "USER_NOT_REGISTERED", "UNALLOCATED_NUMBER", "UNSPECIFIED"}))
		}
	}
	return
}

// ValidateTransferEventsRequestBody runs the validations defined on
// TransferEventsRequestBody
func ValidateTransferEventsRequestBody(body *TransferEventsRequestBody) (err error) {
	if body.CallSessionState != nil {
		if !(*body.CallSessionState == "Active" || *body.CallSessionState == "Transferred" || *body.CallSessionState == "TransferCompleted") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callSessionState", *body.CallSessionState, []interface{}{"Active", "Transferred", "TransferCompleted"}))
		}
	}
	if body.IsActive != nil {
		if !(*body.IsActive == "0" || *body.IsActive == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.isActive", *body.IsActive, []interface{}{"0", "1"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Success") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success"}))
		}
	}
	if body.CallTransferState != nil {
		if !(*body.CallTransferState == " Active" || *body.CallTransferState == "Completed" || *body.CallTransferState == "CallerHangup" || *body.CallTransferState == "CalleeHangup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callTransferState", *body.CallTransferState, []interface{}{" Active", "Completed", "CallerHangup", "CalleeHangup"}))
		}
	}
	if body.CallTransferHangupCause != nil {
		if !(*body.CallTransferHangupCause == "DestinationNotSupported" || *body.CallTransferHangupCause == "InvalidPhoneNumber" || *body.CallTransferHangupCause == "NoActiveClient" || *body.CallTransferHangupCause == "NotAllowed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callTransferHangupCause", *body.CallTransferHangupCause, []interface{}{"DestinationNotSupported", "InvalidPhoneNumber", "NoActiveClient", "NotAllowed"}))
		}
	}
	return
}
