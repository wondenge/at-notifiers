// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"encoding/json"
	"fmt"

	africastalking "github.com/wondenge/at-notifiers/gen/africastalking"
	goa "goa.design/goa/v3/pkg"
)

// BuildDeliveryReportNotifierPayload builds the payload for the africastalking
// delivery_report_notifier endpoint from CLI flags.
func BuildDeliveryReportNotifierPayload(africastalkingDeliveryReportNotifierBody string) (*africastalking.DeliveryReportPayload, error) {
	var err error
	var body DeliveryReportNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingDeliveryReportNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"failureReason\": \"UserAccountSuspended\",\n      \"id\": \"Exercitationem earum et id inventore voluptatem odit.\",\n      \"networkCode\": \"65001\",\n      \"phoneNumber\": \"Eos quam.\",\n      \"retryCount\": \"Sed harum sapiente sed quis.\",\n      \"status\": \"Failed\"\n   }'")
		}
	}
	v := &africastalking.DeliveryReportPayload{
		ID:            body.ID,
		Status:        body.Status,
		PhoneNumber:   body.PhoneNumber,
		NetworkCode:   body.NetworkCode,
		FailureReason: body.FailureReason,
		RetryCount:    body.RetryCount,
	}

	return v, nil
}

// BuildIncomingMessageNotifierPayload builds the payload for the
// africastalking incoming_message_notifier endpoint from CLI flags.
func BuildIncomingMessageNotifierPayload(africastalkingIncomingMessageNotifierBody string) (*africastalking.IncomingMessagePayload, error) {
	var err error
	var body IncomingMessageNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingIncomingMessageNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"date\": \"1997-09-28\",\n      \"from\": \"Enim voluptatem.\",\n      \"id\": \"Qui ullam optio.\",\n      \"linkId\": \"Ducimus dolores ipsum ut rerum saepe.\",\n      \"networkCode\": \"63907\",\n      \"text\": \"Distinctio ut omnis omnis deserunt.\",\n      \"to\": \"Vitae quaerat voluptas.\"\n   }'")
		}
	}
	v := &africastalking.IncomingMessagePayload{
		Date:        body.Date,
		From:        body.From,
		ID:          body.ID,
		LinkID:      body.LinkID,
		Text:        body.Text,
		To:          body.To,
		NetworkCode: body.NetworkCode,
	}

	return v, nil
}

// BuildBulkOptOutNotifierPayload builds the payload for the africastalking
// bulk_optOut_notifier endpoint from CLI flags.
func BuildBulkOptOutNotifierPayload(africastalkingBulkOptOutNotifierBody string) (*africastalking.BulkSMSOptOutPayload, error) {
	var err error
	var body BulkOptOutNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBulkOptOutNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumber\": \"Tenetur sunt quam.\",\n      \"senderId\": \"Tempora impedit accusantium eveniet maiores occaecati.\"\n   }'")
		}
	}
	v := &africastalking.BulkSMSOptOutPayload{
		SenderID:    body.SenderID,
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildSubNotifierPayload builds the payload for the africastalking
// sub_notifier endpoint from CLI flags.
func BuildSubNotifierPayload(africastalkingSubNotifierBody string) (*africastalking.SubNotificationPayload, error) {
	var err error
	var body SubNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSubNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"Non et pariatur non cumque velit laborum.\",\n      \"phoneNumber\": \"Aut quasi quis animi culpa natus.\",\n      \"shortCode\": \"Quo eos porro tempore voluptatum voluptatum qui.\",\n      \"updateType\": \"deletion\"\n   }'")
		}
	}
	v := &africastalking.SubNotificationPayload{
		PhoneNumber: body.PhoneNumber,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		UpdateType:  body.UpdateType,
	}

	return v, nil
}

// BuildVoiceNotifierPayload builds the payload for the africastalking
// voice_notifier endpoint from CLI flags.
func BuildVoiceNotifierPayload(africastalkingVoiceNotifierBody string) (*africastalking.VoiceNotificationPayload, error) {
	var err error
	var body VoiceNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingVoiceNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Itaque atque sed molestias molestiae ea praesentium.\",\n      \"callSessionState\": \"Totam odit dolorem qui dolor eos.\",\n      \"callStartTime\": \"Et temporibus nisi nobis corrupti tempora.\",\n      \"callerCountryCode\": \"Qui quis a id sapiente quia nam.\",\n      \"callerNumber\": \"+254711XXXYYY\",\n      \"currencyCode\": \"Quis inventore eius.\",\n      \"destinationNumber\": \"+254711XXXYYY\",\n      \"dialDestinationNumber\": \"Ducimus voluptas adipisci optio.\",\n      \"dialDurationInSeconds\": \"Iure est deleniti praesentium fugit quo.\",\n      \"dialStartTime\": \"Et voluptatibus necessitatibus quo animi.\",\n      \"direction\": \"Ut consequatur.\",\n      \"dtmfDigits\": \"Atque culpa ducimus dolorem et minus aliquid.\",\n      \"durationInSeconds\": \"Explicabo blanditiis consectetur eligendi ut.\",\n      \"hangupCause\": \"USER_NOT_REGISTERED\",\n      \"isActive\": \"Nobis distinctio.\",\n      \"recordingUrl\": \"Voluptas occaecati est ad aspernatur iste qui.\",\n      \"sessionId\": \"At at non laborum eius id.\"\n   }'")
		}
	}
	v := &africastalking.VoiceNotificationPayload{
		IsActive:              body.IsActive,
		SessionID:             body.SessionID,
		Direction:             body.Direction,
		DestinationNumber:     body.DestinationNumber,
		CallerNumber:          body.CallerNumber,
		CallerCountryCode:     body.CallerCountryCode,
		CallStartTime:         body.CallStartTime,
		DtmfDigits:            body.DtmfDigits,
		RecordingURL:          body.RecordingURL,
		DurationInSeconds:     body.DurationInSeconds,
		CurrencyCode:          body.CurrencyCode,
		Amount:                body.Amount,
		CallSessionState:      body.CallSessionState,
		DialDestinationNumber: body.DialDestinationNumber,
		DialDurationInSeconds: body.DialDurationInSeconds,
		DialStartTime:         body.DialStartTime,
		HangupCause:           body.HangupCause,
	}

	return v, nil
}

// BuildTransferEventNotifierPayload builds the payload for the africastalking
// transfer_event_notifier endpoint from CLI flags.
func BuildTransferEventNotifierPayload(africastalkingTransferEventNotifierBody string) (*africastalking.TransferEventPayload, error) {
	var err error
	var body TransferEventNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTransferEventNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callSessionState\": \"Transferred\",\n      \"callTransferHangupCause\": \"NotAllowed\",\n      \"callTransferParam\": \"Doloremque reiciendis iusto eligendi repellat.\",\n      \"callTransferState\": \" Active\",\n      \"callTransferredToNumber\": \"Sunt praesentium et repellat.\",\n      \"isActive\": \"1\",\n      \"status\": \"Success\"\n   }'")
		}
	}
	v := &africastalking.TransferEventPayload{
		CallSessionState:        body.CallSessionState,
		IsActive:                body.IsActive,
		Status:                  body.Status,
		CallTransferParam:       body.CallTransferParam,
		CallTransferredToNumber: body.CallTransferredToNumber,
		CallTransferState:       body.CallTransferState,
		CallTransferHangupCause: body.CallTransferHangupCause,
	}

	return v, nil
}

// BuildUssdNotifierPayload builds the payload for the africastalking
// ussd_notifier endpoint from CLI flags.
func BuildUssdNotifierPayload(africastalkingUssdNotifierBody string) (*africastalking.USSDPayload, error) {
	var err error
	var body UssdNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingUssdNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"networkCode\": \"Fugit molestias voluptatibus.\",\n      \"phoneNumber\": \"Ut et quaerat voluptatum.\",\n      \"serviceCode\": \"Velit odio nemo.\",\n      \"sessionId\": \"Sunt maiores vero repudiandae similique quos in.\",\n      \"text\": \"Harum neque quas fuga.\"\n   }'")
		}
	}
	v := &africastalking.USSDPayload{
		SessionID:   body.SessionID,
		PhoneNumber: body.PhoneNumber,
		NetworkCode: body.NetworkCode,
		ServiceCode: body.ServiceCode,
		Text:        body.Text,
	}

	return v, nil
}

// BuildValidationNotifierPayload builds the payload for the africastalking
// validation_notifier endpoint from CLI flags.
func BuildValidationNotifierPayload(africastalkingValidationNotifierBody string) (*africastalking.AirtimeValidationPayload, error) {
	var err error
	var body ValidationNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingValidationNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 500,\n      \"currencyCode\": \"KES\",\n      \"phoneNumber\": \"+254711XXXYYY\",\n      \"transactionId\": \"SomeTransactionID\"\n   }'")
		}
	}
	v := &africastalking.AirtimeValidationPayload{
		TransactionID: body.TransactionID,
		PhoneNumber:   body.PhoneNumber,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
	}

	return v, nil
}

// BuildStatusNotifierPayload builds the payload for the africastalking
// status_notifier endpoint from CLI flags.
func BuildStatusNotifierPayload(africastalkingStatusNotifierBody string) (*africastalking.AirtimeStatusPayload, error) {
	var err error
	var body StatusNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingStatusNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"requestId\": \"ATQid_SampleTxnId123\",\n      \"status\": \"Success\"\n   }'")
		}
	}
	v := &africastalking.AirtimeStatusPayload{
		RequestID: body.RequestID,
		Status:    body.Status,
	}

	return v, nil
}

// BuildPaymentNotifierPayload builds the payload for the africastalking
// payment_notifier endpoint from CLI flags.
func BuildPaymentNotifierPayload(africastalkingPaymentNotifierBody string) (*africastalking.PaymentNotificationPayload, error) {
	var err error
	var body PaymentNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPaymentNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"category\": \"UserStashTopup\",\n      \"clientAccount\": \"Labore consequatur amet corporis.\",\n      \"description\": \"Qui aut qui ipsum.\",\n      \"destination\": \"Nisi incidunt at harum nobis autem.\",\n      \"destinationType\": \"BankAccount\",\n      \"productName\": \"Nesciunt nihil quae libero explicabo.\",\n      \"provider\": \"Admin\",\n      \"providerChannel\": \"Nihil nulla facere neque.\",\n      \"providerFee\": \"Nihil recusandae molestiae molestiae laborum consequatur eligendi.\",\n      \"providerMetadata\": \"Qui magnam rerum illum soluta voluptas aut.\",\n      \"providerRefId\": \"Totam omnis.\",\n      \"requestMetadata\": \"Reprehenderit repudiandae consequatur sit.\",\n      \"source\": \"Qui voluptatibus ad aut veniam sed.\",\n      \"sourceType\": \"BankAccount\",\n      \"status\": \"Failed\",\n      \"transactionDate\": \"Veritatis dicta.\",\n      \"transactionFee\": \"Quia a et unde dolorem labore.\",\n      \"transactionId\": \"Assumenda ipsum omnis.\",\n      \"value\": \"Tempore voluptas est maiores.\"\n   }'")
		}
		if !(body.Category == "BankCheckout" || body.Category == "CardCheckout" || body.Category == "MobileCheckout" || body.Category == "MobileC2B" || body.Category == "MobileB2C" || body.Category == "MobileB2B" || body.Category == "BankTransfer" || body.Category == "WalletTransfer" || body.Category == "UserStashTopup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
		}
		if !(body.Provider == "Mpesa" || body.Provider == "Segovia" || body.Provider == "Flutterwave" || body.Provider == "Admin" || body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
		}
		if !(body.SourceType == "PhoneNumber" || body.SourceType == "BankAccount" || body.SourceType == "Card" || body.SourceType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.sourceType", body.SourceType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
		if !(body.DestinationType == "PhoneNumber" || body.DestinationType == "BankAccount" || body.DestinationType == "Card" || body.DestinationType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destinationType", body.DestinationType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
		if !(body.Status == "Success" || body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{"Success", "Failed"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.PaymentNotificationPayload{
		TransactionID:    body.TransactionID,
		Category:         body.Category,
		Provider:         body.Provider,
		ProviderRefID:    body.ProviderRefID,
		ProviderChannel:  body.ProviderChannel,
		ClientAccount:    body.ClientAccount,
		ProductName:      body.ProductName,
		SourceType:       body.SourceType,
		Source:           body.Source,
		DestinationType:  body.DestinationType,
		Destination:      body.Destination,
		Value:            body.Value,
		TransactionFee:   body.TransactionFee,
		ProviderFee:      body.ProviderFee,
		Status:           body.Status,
		Description:      body.Description,
		RequestMetadata:  body.RequestMetadata,
		ProviderMetadata: body.ProviderMetadata,
		TransactionDate:  body.TransactionDate,
	}

	return v, nil
}

// BuildC2bValidationNotifierPayload builds the payload for the africastalking
// c2b_validation_notifier endpoint from CLI flags.
func BuildC2bValidationNotifierPayload(africastalkingC2bValidationNotifierBody string) (*africastalking.C2BValidationNotificationPayload, error) {
	var err error
	var body C2bValidationNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingC2bValidationNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"clientAccount\": \"Et veritatis.\",\n      \"phoneNumber\": \"Repellat eos ut quo ut ex sunt.\",\n      \"productName\": \"Magni reprehenderit sunt.\",\n      \"provider\": \"TigoTanzania\",\n      \"providerMetadata\": {\n         \"Magni voluptas dolorem consequatur repellendus sed reiciendis.\": \"Quo quia perspiciatis deleniti voluptate et.\",\n         \"Maxime voluptate aspernatur sequi ut nostrum officiis.\": \"Non molestiae aliquid dicta sint non repudiandae.\"\n      },\n      \"value\": \"Delectus perferendis omnis veniam.\"\n   }'")
		}
		if body.ProviderMetadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
		}
		if !(body.Provider == "Mpesa" || body.Provider == "TigoTanzania" || body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", body.Provider, []interface{}{"Mpesa", "TigoTanzania", "Athena"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.C2BValidationNotificationPayload{
		Provider:      body.Provider,
		ClientAccount: body.ClientAccount,
		ProductName:   body.ProductName,
		PhoneNumber:   body.PhoneNumber,
		Value:         body.Value,
	}
	if body.ProviderMetadata != nil {
		v.ProviderMetadata = make(map[string]string, len(body.ProviderMetadata))
		for key, val := range body.ProviderMetadata {
			tk := key
			tv := val
			v.ProviderMetadata[tk] = tv
		}
	}

	return v, nil
}

// BuildB2cValidationNotifierPayload builds the payload for the africastalking
// b2c_validation_notifier endpoint from CLI flags.
func BuildB2cValidationNotifierPayload(africastalkingB2cValidationNotifierBody string) (*africastalking.B2CValidationNotificationPayload, error) {
	var err error
	var body B2cValidationNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingB2cValidationNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 500,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Nobis voluptas.\": \"Quia autem.\"\n      },\n      \"phoneNumber\": \"+254711XXXYYY\",\n      \"sourceIpAddress\": \"12.34.56.78\",\n      \"transactionId\": \"SomeTransactionID\"\n   }'")
		}
	}
	v := &africastalking.B2CValidationNotificationPayload{
		TransactionID:   body.TransactionID,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
		SourceIPAddress: body.SourceIPAddress,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildIotNotifierPayload builds the payload for the africastalking
// iot_notifier endpoint from CLI flags.
func BuildIotNotifierPayload(africastalkingIotNotifierBody string) (*africastalking.IoTNotificationPayload, error) {
	var err error
	var body IotNotifierRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingIotNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"payload\": \"42\",\n      \"topic\": \"myusername/devicegroup/sensor/id/1/temperature\"\n   }'")
		}
	}
	v := &africastalking.IoTNotificationPayload{
		Payload: body.Payload,
		Topic:   body.Topic,
	}

	return v, nil
}
