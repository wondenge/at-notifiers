// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ussd service
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package ussd

import (
	"context"

	ussdviews "github.com/wondenge/at-notifiers/gen/ussd/views"
)

// Service is the ussd service interface.
type Service interface {
	// Callback URL that sends request data our App using HTTP POST.
	UssdNotifier(context.Context, *USSDPayload) (res *USSDResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ussd"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"ussdNotifier"}

// USSDPayload is the payload type of the ussd service ussdNotifier method.
type USSDPayload struct {
	// A unique value generated when the session starts.
	SessionID *string
	// Mobile number of the subscriber interacting with USSD application.
	PhoneNumber *string
	// Telco of the mobile number interacting with USSD application.
	NetworkCode *string
	// USSD code assigned to application.
	ServiceCode *string
	// Shows the user input.
	Text *string
}

// USSDResponse is the result type of the ussd service ussdNotifier method.
type USSDResponse struct {
	// Plain text response back to AT gateway
	Response *string
}

// NewUSSDResponse initializes result type USSDResponse from viewed result type
// USSDResponse.
func NewUSSDResponse(vres *ussdviews.USSDResponse) *USSDResponse {
	return newUSSDResponse(vres.Projected)
}

// NewViewedUSSDResponse initializes viewed result type USSDResponse from
// result type USSDResponse using the given view.
func NewViewedUSSDResponse(res *USSDResponse, view string) *ussdviews.USSDResponse {
	p := newUSSDResponseView(res)
	return &ussdviews.USSDResponse{Projected: p, View: "default"}
}

// newUSSDResponse converts projected type USSDResponse to service type
// USSDResponse.
func newUSSDResponse(vres *ussdviews.USSDResponseView) *USSDResponse {
	res := &USSDResponse{
		Response: vres.Response,
	}
	return res
}

// newUSSDResponseView projects result type USSDResponse to projected type
// USSDResponseView using the "default" view.
func newUSSDResponseView(res *USSDResponse) *ussdviews.USSDResponseView {
	vres := &ussdviews.USSDResponseView{
		Response: res.Response,
	}
	return vres
}
