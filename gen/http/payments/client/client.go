// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments client HTTP transport
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the payments service endpoint HTTP clients.
type Client struct {
	// PaymentNotifier Doer is the HTTP client used to make requests to the
	// paymentNotifier endpoint.
	PaymentNotifierDoer goahttp.Doer

	// C2bNotifier Doer is the HTTP client used to make requests to the c2bNotifier
	// endpoint.
	C2bNotifierDoer goahttp.Doer

	// B2cNotifier Doer is the HTTP client used to make requests to the b2cNotifier
	// endpoint.
	B2cNotifierDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the payments service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		PaymentNotifierDoer: doer,
		C2bNotifierDoer:     doer,
		B2cNotifierDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// PaymentNotifier returns an endpoint that makes HTTP requests to the payments
// service paymentNotifier server.
func (c *Client) PaymentNotifier() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePaymentNotifierRequest(c.encoder)
		decodeResponse = DecodePaymentNotifierResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPaymentNotifierRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PaymentNotifierDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("payments", "paymentNotifier", err)
		}
		return decodeResponse(resp)
	}
}

// C2bNotifier returns an endpoint that makes HTTP requests to the payments
// service c2bNotifier server.
func (c *Client) C2bNotifier() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeC2bNotifierRequest(c.encoder)
		decodeResponse = DecodeC2bNotifierResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildC2bNotifierRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.C2bNotifierDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("payments", "c2bNotifier", err)
		}
		return decodeResponse(resp)
	}
}

// B2cNotifier returns an endpoint that makes HTTP requests to the payments
// service b2cNotifier server.
func (c *Client) B2cNotifier() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeB2cNotifierRequest(c.encoder)
		decodeResponse = DecodeB2cNotifierResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildB2cNotifierRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.B2cNotifierDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("payments", "b2cNotifier", err)
		}
		return decodeResponse(resp)
	}
}
