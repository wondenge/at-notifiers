// Code generated by goa v3.1.3, DO NOT EDIT.
//
// airtime endpoints
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package airtime

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "airtime" service endpoints.
type Endpoints struct {
	Validation endpoint.Endpoint
	Status     endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "airtime" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Validation: NewValidationEndpoint(s),
		Status:     NewStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "airtime" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.Validation = m(e.Validation)
	e.Status = m(e.Status)
}

// NewValidationEndpoint returns an endpoint function that calls the method
// "validation" of service "airtime".
func NewValidationEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AirtimeValidationPayload)
		return s.Validation(ctx, p)
	}
}

// NewStatusEndpoint returns an endpoint function that calls the method
// "status" of service "airtime".
func NewStatusEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AirtimeStatus)
		return s.Status(ctx, p)
	}
}
