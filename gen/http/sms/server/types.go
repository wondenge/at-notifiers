// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	sms "github.com/wondenge/at-notifiers/gen/sms"
	goa "goa.design/goa/v3/pkg"
)

// DeliveryReportRequestBody is the type of the "sms" service "deliveryReport"
// endpoint HTTP request body.
type DeliveryReportRequestBody struct {
	// A unique identifier for each message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The status of the message.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Mobile phone number message was sent out to.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// A unique identifier for the Telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
	// Only provided if status is Rejected or Failed.
	FailureReason *string `form:"failureReason,omitempty" json:"failureReason,omitempty" xml:"failureReason,omitempty"`
	// Number of times the request to send a message to the device was retried
	// before it succeeded or definitely failed.
	RetryCount *string `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
}

// IncomingMessageRequestBody is the type of the "sms" service
// "incomingMessage" endpoint HTTP request body.
type IncomingMessageRequestBody struct {
	// The date and time when the message was received.
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The number that sent the message.
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// The internal ID that we use to store this message.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Parameter required when responding to an on-demand user request with a
	// premium message.
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// The message content.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// The number to which the message was sent.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// A unique identifier for the telco that handled the message.
	NetworkCode *string `form:"networkCode,omitempty" json:"networkCode,omitempty" xml:"networkCode,omitempty"`
}

// BulkSMSOptOutRequestBody is the type of the "sms" service "bulkSMSOptOut"
// endpoint HTTP request body.
type BulkSMSOptOutRequestBody struct {
	// Shortcode/Alphanumeric Sender ID the user opted out from.
	SenderID *string `form:"senderId,omitempty" json:"senderId,omitempty" xml:"senderId,omitempty"`
	// Mobile phone number of the subscriber who opted out.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
}

// SubNotifierRequestBody is the type of the "sms" service "subNotifier"
// endpoint HTTP request body.
type SubNotifierRequestBody struct {
	// Mobile phone number to subscribe or unsubscribe.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The short code that has this product.
	ShortCode *string `form:"shortCode,omitempty" json:"shortCode,omitempty" xml:"shortCode,omitempty"`
	// The product keyword that the user has subscribed or unsubscribed from.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// The type of the update.
	UpdateType *string `form:"updateType,omitempty" json:"updateType,omitempty" xml:"updateType,omitempty"`
}

// NewDeliveryReport1 builds a sms service deliveryReport endpoint payload.
func NewDeliveryReport1(body *DeliveryReportRequestBody) *sms.DeliveryReport1 {
	v := &sms.DeliveryReport1{
		ID:            body.ID,
		Status:        body.Status,
		PhoneNumber:   body.PhoneNumber,
		NetworkCode:   body.NetworkCode,
		FailureReason: body.FailureReason,
		RetryCount:    body.RetryCount,
	}

	return v
}

// NewIncomingMessage1 builds a sms service incomingMessage endpoint payload.
func NewIncomingMessage1(body *IncomingMessageRequestBody) *sms.IncomingMessage1 {
	v := &sms.IncomingMessage1{
		Date:        body.Date,
		From:        body.From,
		ID:          body.ID,
		LinkID:      body.LinkID,
		Text:        body.Text,
		To:          body.To,
		NetworkCode: body.NetworkCode,
	}

	return v
}

// NewBulkSMSOptOut1 builds a sms service bulkSMSOptOut endpoint payload.
func NewBulkSMSOptOut1(body *BulkSMSOptOutRequestBody) *sms.BulkSMSOptOut1 {
	v := &sms.BulkSMSOptOut1{
		SenderID:    body.SenderID,
		PhoneNumber: body.PhoneNumber,
	}

	return v
}

// NewSubNotifierSubscriptionNotification builds a sms service subNotifier
// endpoint payload.
func NewSubNotifierSubscriptionNotification(body *SubNotifierRequestBody) *sms.SubscriptionNotification {
	v := &sms.SubscriptionNotification{
		PhoneNumber: body.PhoneNumber,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		UpdateType:  body.UpdateType,
	}

	return v
}

// ValidateDeliveryReportRequestBody runs the validations defined on
// DeliveryReportRequestBody
func ValidateDeliveryReportRequestBody(body *DeliveryReportRequestBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Sent" || *body.Status == "Submitted" || *body.Status == "Buffered" || *body.Status == "Rejected" || *body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Sent", "Submitted", "Buffered", "Rejected", "Success", "Failed"}))
		}
	}
	if body.NetworkCode != nil {
		if !(*body.NetworkCode == "62120" || *body.NetworkCode == "62130" || *body.NetworkCode == "62150" || *body.NetworkCode == "62160" || *body.NetworkCode == "63510" || *body.NetworkCode == "63513" || *body.NetworkCode == "63514" || *body.NetworkCode == "63902" || *body.NetworkCode == "63903" || *body.NetworkCode == "63907" || *body.NetworkCode == "63999" || *body.NetworkCode == "64002" || *body.NetworkCode == "64003" || *body.NetworkCode == "64004" || *body.NetworkCode == "64005" || *body.NetworkCode == "64007" || *body.NetworkCode == "64009" || *body.NetworkCode == "64101" || *body.NetworkCode == "64110" || *body.NetworkCode == "64111" || *body.NetworkCode == "64114" || *body.NetworkCode == "65001" || *body.NetworkCode == "65010" || *body.NetworkCode == "99999") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.networkCode", *body.NetworkCode, []interface{}{"62120", "62130", "62150", "62160", "63510", "63513", "63514", "63902", "63903", "63907", "63999", "64002", "64003", "64004", "64005", "64007", "64009", "64101", "64110", "64111", "64114", "65001", "65010", "99999"}))
		}
	}
	if body.FailureReason != nil {
		if !(*body.FailureReason == "InsufficientCredit" || *body.FailureReason == "InvalidLinkId" || *body.FailureReason == "UserIsInactive" || *body.FailureReason == "UserInBlackList" || *body.FailureReason == "UserAccountSuspended" || *body.FailureReason == "NotNetworkSubscriber" || *body.FailureReason == "UserNotSubscribedToProduct" || *body.FailureReason == "UserDoesNotExist" || *body.FailureReason == "DeliveryFailure") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.failureReason", *body.FailureReason, []interface{}{"InsufficientCredit", "InvalidLinkId", "UserIsInactive", "UserInBlackList", "UserAccountSuspended", "NotNetworkSubscriber", "UserNotSubscribedToProduct", "UserDoesNotExist", "DeliveryFailure"}))
		}
	}
	return
}

// ValidateIncomingMessageRequestBody runs the validations defined on
// IncomingMessageRequestBody
func ValidateIncomingMessageRequestBody(body *IncomingMessageRequestBody) (err error) {
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.NetworkCode != nil {
		if !(*body.NetworkCode == "62120" || *body.NetworkCode == "62130" || *body.NetworkCode == "62150" || *body.NetworkCode == "62160" || *body.NetworkCode == "63510" || *body.NetworkCode == "63513" || *body.NetworkCode == "63514" || *body.NetworkCode == "63902" || *body.NetworkCode == "63903" || *body.NetworkCode == "63907" || *body.NetworkCode == "63999" || *body.NetworkCode == "64002" || *body.NetworkCode == "64003" || *body.NetworkCode == "64004" || *body.NetworkCode == "64005" || *body.NetworkCode == "64007" || *body.NetworkCode == "64009" || *body.NetworkCode == "64101" || *body.NetworkCode == "64110" || *body.NetworkCode == "64111" || *body.NetworkCode == "64114" || *body.NetworkCode == "65001" || *body.NetworkCode == "65010" || *body.NetworkCode == "99999") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.networkCode", *body.NetworkCode, []interface{}{"62120", "62130", "62150", "62160", "63510", "63513", "63514", "63902", "63903", "63907", "63999", "64002", "64003", "64004", "64005", "64007", "64009", "64101", "64110", "64111", "64114", "65001", "65010", "99999"}))
		}
	}
	return
}

// ValidateSubNotifierRequestBody runs the validations defined on
// SubNotifierRequestBody
func ValidateSubNotifierRequestBody(body *SubNotifierRequestBody) (err error) {
	if body.UpdateType != nil {
		if !(*body.UpdateType == "addition" || *body.UpdateType == "deletion") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.updateType", *body.UpdateType, []interface{}{"addition", "deletion"}))
		}
	}
	return
}
