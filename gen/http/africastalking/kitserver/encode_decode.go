// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/at-notifiers/gen/http/africastalking/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeSmsDeliveryReportResponse returns a go-kit EncodeResponseFunc suitable
// for encoding africastalking sms_delivery_report responses.
func EncodeSmsDeliveryReportResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeSmsDeliveryReportResponse(encoder)
}

// DecodeSmsDeliveryReportRequest returns a go-kit DecodeRequestFunc suitable
// for decoding africastalking sms_delivery_report requests.
func DecodeSmsDeliveryReportRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeSmsDeliveryReportRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeSmsIncomingMessageResponse returns a go-kit EncodeResponseFunc
// suitable for encoding africastalking sms_incoming_message responses.
func EncodeSmsIncomingMessageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeSmsIncomingMessageResponse(encoder)
}

// DecodeSmsIncomingMessageRequest returns a go-kit DecodeRequestFunc suitable
// for decoding africastalking sms_incoming_message requests.
func DecodeSmsIncomingMessageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeSmsIncomingMessageRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeSmsBulkOptoutResponse returns a go-kit EncodeResponseFunc suitable for
// encoding africastalking sms_bulk_optout responses.
func EncodeSmsBulkOptoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeSmsBulkOptoutResponse(encoder)
}

// DecodeSmsBulkOptoutRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking sms_bulk_optout requests.
func DecodeSmsBulkOptoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeSmsBulkOptoutRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeSmsSubscriptionResponse returns a go-kit EncodeResponseFunc suitable
// for encoding africastalking sms_subscription responses.
func EncodeSmsSubscriptionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeSmsSubscriptionResponse(encoder)
}

// DecodeSmsSubscriptionRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking sms_subscription requests.
func DecodeSmsSubscriptionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeSmsSubscriptionRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeVoiceNotificationResponse returns a go-kit EncodeResponseFunc suitable
// for encoding africastalking voice_notification responses.
func EncodeVoiceNotificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeVoiceNotificationResponse(encoder)
}

// DecodeVoiceNotificationRequest returns a go-kit DecodeRequestFunc suitable
// for decoding africastalking voice_notification requests.
func DecodeVoiceNotificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeVoiceNotificationRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeTransferEventResponse returns a go-kit EncodeResponseFunc suitable for
// encoding africastalking transfer_event responses.
func EncodeTransferEventResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeTransferEventResponse(encoder)
}

// DecodeTransferEventRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking transfer_event requests.
func DecodeTransferEventRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeTransferEventRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeUssdNotifierResponse returns a go-kit EncodeResponseFunc suitable for
// encoding africastalking ussd_notifier responses.
func EncodeUssdNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeUssdNotifierResponse(encoder)
}

// DecodeUssdNotifierRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking ussd_notifier requests.
func DecodeUssdNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeUssdNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeValidationNotifierResponse returns a go-kit EncodeResponseFunc
// suitable for encoding africastalking validation_notifier responses.
func EncodeValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeValidationNotifierResponse(encoder)
}

// DecodeValidationNotifierRequest returns a go-kit DecodeRequestFunc suitable
// for decoding africastalking validation_notifier requests.
func DecodeValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeValidationNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeStatusNotifierResponse returns a go-kit EncodeResponseFunc suitable
// for encoding africastalking status_notifier responses.
func EncodeStatusNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeStatusNotifierResponse(encoder)
}

// DecodeStatusNotifierRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking status_notifier requests.
func DecodeStatusNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeStatusNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodePaymentNotifierResponse returns a go-kit EncodeResponseFunc suitable
// for encoding africastalking payment_notifier responses.
func EncodePaymentNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodePaymentNotifierResponse(encoder)
}

// DecodePaymentNotifierRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking payment_notifier requests.
func DecodePaymentNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodePaymentNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeC2bValidationNotifierResponse returns a go-kit EncodeResponseFunc
// suitable for encoding africastalking c2b_validation_notifier responses.
func EncodeC2bValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeC2bValidationNotifierResponse(encoder)
}

// DecodeC2bValidationNotifierRequest returns a go-kit DecodeRequestFunc
// suitable for decoding africastalking c2b_validation_notifier requests.
func DecodeC2bValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeC2bValidationNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeB2cValidationNotifierResponse returns a go-kit EncodeResponseFunc
// suitable for encoding africastalking b2c_validation_notifier responses.
func EncodeB2cValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeB2cValidationNotifierResponse(encoder)
}

// DecodeB2cValidationNotifierRequest returns a go-kit DecodeRequestFunc
// suitable for decoding africastalking b2c_validation_notifier requests.
func DecodeB2cValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeB2cValidationNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeIotNotifierResponse returns a go-kit EncodeResponseFunc suitable for
// encoding africastalking iot_notifier responses.
func EncodeIotNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeIotNotifierResponse(encoder)
}

// DecodeIotNotifierRequest returns a go-kit DecodeRequestFunc suitable for
// decoding africastalking iot_notifier requests.
func DecodeIotNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeIotNotifierRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}
