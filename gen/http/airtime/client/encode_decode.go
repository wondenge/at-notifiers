// Code generated by goa v3.1.3, DO NOT EDIT.
//
// airtime HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	airtime "github.com/wondenge/at-notifiers/gen/airtime"
	goahttp "goa.design/goa/v3/http"
)

// BuildValidationRequest instantiates a HTTP request object with method and
// path set to call the "airtime" service "validation" endpoint
func (c *Client) BuildValidationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ValidationAirtimePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("airtime", "validation", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeValidationRequest returns an encoder for requests sent to the airtime
// validation server.
func EncodeValidationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*airtime.AirtimeValidationPayload)
		if !ok {
			return goahttp.ErrInvalidType("airtime", "validation", "*airtime.AirtimeValidationPayload", v)
		}
		body := NewValidationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("airtime", "validation", err)
		}
		return nil
	}
}

// DecodeValidationResponse returns a decoder for responses returned by the
// airtime validation endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeValidationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body ValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("airtime", "validation", err)
			}
			err = ValidateValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("airtime", "validation", err)
			}
			res := NewValidationAirtimeValidationResponseCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("airtime", "validation", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "airtime" service "status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusAirtimePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("airtime", "status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStatusRequest returns an encoder for requests sent to the airtime
// status server.
func EncodeStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*airtime.AirtimeStatus)
		if !ok {
			return goahttp.ErrInvalidType("airtime", "status", "*airtime.AirtimeStatus", v)
		}
		body := NewStatusRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("airtime", "status", err)
		}
		return nil
	}
}

// DecodeStatusResponse returns a decoder for responses returned by the airtime
// status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("airtime", "status", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("airtime", "status", resp.StatusCode, string(body))
		}
	}
}
