// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	sms "github.com/wondenge/at-notifiers/gen/sms"
	goahttp "goa.design/goa/v3/http"
)

// BuildDeliveryReportRequest instantiates a HTTP request object with method
// and path set to call the "sms" service "deliveryReport" endpoint
func (c *Client) BuildDeliveryReportRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeliveryReportSmsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sms", "deliveryReport", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeliveryReportRequest returns an encoder for requests sent to the sms
// deliveryReport server.
func EncodeDeliveryReportRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sms.DeliveryReport1)
		if !ok {
			return goahttp.ErrInvalidType("sms", "deliveryReport", "*sms.DeliveryReport1", v)
		}
		body := NewDeliveryReportRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sms", "deliveryReport", err)
		}
		return nil
	}
}

// DecodeDeliveryReportResponse returns a decoder for responses returned by the
// sms deliveryReport endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDeliveryReportResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sms", "deliveryReport", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sms", "deliveryReport", resp.StatusCode, string(body))
		}
	}
}

// BuildIncomingMessageRequest instantiates a HTTP request object with method
// and path set to call the "sms" service "incomingMessage" endpoint
func (c *Client) BuildIncomingMessageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IncomingMessageSmsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sms", "incomingMessage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIncomingMessageRequest returns an encoder for requests sent to the sms
// incomingMessage server.
func EncodeIncomingMessageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sms.IncomingMessage1)
		if !ok {
			return goahttp.ErrInvalidType("sms", "incomingMessage", "*sms.IncomingMessage1", v)
		}
		body := NewIncomingMessageRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sms", "incomingMessage", err)
		}
		return nil
	}
}

// DecodeIncomingMessageResponse returns a decoder for responses returned by
// the sms incomingMessage endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeIncomingMessageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sms", "incomingMessage", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sms", "incomingMessage", resp.StatusCode, string(body))
		}
	}
}

// BuildBulkSMSOptOutRequest instantiates a HTTP request object with method and
// path set to call the "sms" service "bulkSMSOptOut" endpoint
func (c *Client) BuildBulkSMSOptOutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BulkSMSOptOutSmsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sms", "bulkSMSOptOut", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBulkSMSOptOutRequest returns an encoder for requests sent to the sms
// bulkSMSOptOut server.
func EncodeBulkSMSOptOutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sms.BulkSMSOptOut1)
		if !ok {
			return goahttp.ErrInvalidType("sms", "bulkSMSOptOut", "*sms.BulkSMSOptOut1", v)
		}
		body := NewBulkSMSOptOutRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sms", "bulkSMSOptOut", err)
		}
		return nil
	}
}

// DecodeBulkSMSOptOutResponse returns a decoder for responses returned by the
// sms bulkSMSOptOut endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeBulkSMSOptOutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sms", "bulkSMSOptOut", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sms", "bulkSMSOptOut", resp.StatusCode, string(body))
		}
	}
}

// BuildSubNotifierRequest instantiates a HTTP request object with method and
// path set to call the "sms" service "subNotifier" endpoint
func (c *Client) BuildSubNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubNotifierSmsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sms", "subNotifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubNotifierRequest returns an encoder for requests sent to the sms
// subNotifier server.
func EncodeSubNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sms.SubscriptionNotification)
		if !ok {
			return goahttp.ErrInvalidType("sms", "subNotifier", "*sms.SubscriptionNotification", v)
		}
		body := NewSubNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sms", "subNotifier", err)
		}
		return nil
	}
}

// DecodeSubNotifierResponse returns a decoder for responses returned by the
// sms subNotifier endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSubNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sms", "subNotifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sms", "subNotifier", resp.StatusCode, string(body))
		}
	}
}
