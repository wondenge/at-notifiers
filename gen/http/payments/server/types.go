// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	payments "github.com/wondenge/at-notifiers/gen/payments"
	goa "goa.design/goa/v3/pkg"
)

// PaymentNotifierRequestBody is the type of the "payments" service
// "paymentNotifier" endpoint HTTP request body.
type PaymentNotifierRequestBody struct {
	// Unique transactionId generated for every payment.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Category of the payment.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// Payment provider that facilitated this transaction.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Unique ID generated by the payment provider for this transaction.
	ProviderRefID *string `form:"providerRefId,omitempty" json:"providerRefId,omitempty" xml:"providerRefId,omitempty"`
	// Name or number of channel that used to facilitate this payment.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string `form:"clientAccount,omitempty" json:"clientAccount,omitempty" xml:"clientAccount,omitempty"`
	// Africa’s Talking Payment Product used to facilitate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Type of party providing the funds for this transaction (the Debit Party).
	SourceType *string `form:"sourceType,omitempty" json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// Unique identifier of the party that is providing the funds for this
	// transaction.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Unique identifier of the party receiving funds in this transaction (the
	// Credit Party).
	DestinationType *string `form:"destinationType,omitempty" json:"destinationType,omitempty" xml:"destinationType,omitempty"`
	// Unique identifier of the party  receiving the funds for this transaction.
	Destination *string `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
	// Value being exchanged in this transaction.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// Fee charged by a payment provider to facilitate this transaction.
	ProviderFee *string `form:"providerFee,omitempty" json:"providerFee,omitempty" xml:"providerFee,omitempty"`
	// The final status of this transaction
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of this transaction.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Any metadata that was sent by your application when it initiated this
	// transaction.
	RequestMetadata *string `form:"requestMetadata,omitempty" json:"requestMetadata,omitempty" xml:"requestMetadata,omitempty"`
	// Any additional data that we receive from a payment provider for a particular
	// transaction.
	ProviderMetadata *string `form:"providerMetadata,omitempty" json:"providerMetadata,omitempty" xml:"providerMetadata,omitempty"`
	// The date and time when a successful transaction was completed.
	TransactionDate *string `form:"transactionDate,omitempty" json:"transactionDate,omitempty" xml:"transactionDate,omitempty"`
}

// C2bNotifierRequestBody is the type of the "payments" service "c2bNotifier"
// endpoint HTTP request body.
type C2bNotifierRequestBody struct {
	// Payment provider that is facilitating this transaction
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string `form:"clientAccount,omitempty" json:"clientAccount,omitempty" xml:"clientAccount,omitempty"`
	// Identifies the Africa’s Talking Payment Product used to facilitate this
	// transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Phone number of the mobile subscriber who is initiating the C2B transaction.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value being exchanged in this transaction
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Additional data received from a payment provider for a particular transaction
	ProviderMetadata map[string]string `form:"providerMetadata,omitempty" json:"providerMetadata,omitempty" xml:"providerMetadata,omitempty"`
}

// B2cNotifierRequestBody is the type of the "payments" service "b2cNotifier"
// endpoint HTTP request body.
type B2cNotifierRequestBody struct {
	// The transaction id within Africa’s Talking.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// The phone number of the mobile subscriber receiving the B2C payment.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount - in the provided currency - that the client will receive.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// The IPv4 address that initiated the B2C transaction.
	SourceIPAddress *string `form:"sourceIpAddress,omitempty" json:"sourceIpAddress,omitempty" xml:"sourceIpAddress,omitempty"`
	// A map of metadata associated with this request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// B2cNotifierResponseBody is the type of the "payments" service "b2cNotifier"
// endpoint HTTP response body.
type B2cNotifierResponseBody struct {
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewB2cNotifierResponseBody builds the HTTP response body from the result of
// the "b2cNotifier" endpoint of the "payments" service.
func NewB2cNotifierResponseBody(res *payments.B2CValidationNotificationResponse) *B2cNotifierResponseBody {
	body := &B2cNotifierResponseBody{
		Status: res.Status,
	}
	return body
}

// NewPaymentNotifierPaymentNotification builds a payments service
// paymentNotifier endpoint payload.
func NewPaymentNotifierPaymentNotification(body *PaymentNotifierRequestBody) *payments.PaymentNotification {
	v := &payments.PaymentNotification{
		TransactionID:    *body.TransactionID,
		Category:         *body.Category,
		Provider:         *body.Provider,
		ProviderRefID:    body.ProviderRefID,
		ProviderChannel:  *body.ProviderChannel,
		ClientAccount:    body.ClientAccount,
		ProductName:      *body.ProductName,
		SourceType:       *body.SourceType,
		Source:           *body.Source,
		DestinationType:  *body.DestinationType,
		Destination:      *body.Destination,
		Value:            *body.Value,
		TransactionFee:   body.TransactionFee,
		ProviderFee:      body.ProviderFee,
		Status:           *body.Status,
		Description:      *body.Description,
		RequestMetadata:  *body.RequestMetadata,
		ProviderMetadata: *body.ProviderMetadata,
		TransactionDate:  body.TransactionDate,
	}

	return v
}

// NewC2bNotifierC2BValidationNotification builds a payments service
// c2bNotifier endpoint payload.
func NewC2bNotifierC2BValidationNotification(body *C2bNotifierRequestBody) *payments.C2BValidationNotification {
	v := &payments.C2BValidationNotification{
		Provider:      *body.Provider,
		ClientAccount: body.ClientAccount,
		ProductName:   *body.ProductName,
		PhoneNumber:   *body.PhoneNumber,
		Value:         *body.Value,
	}
	v.ProviderMetadata = make(map[string]string, len(body.ProviderMetadata))
	for key, val := range body.ProviderMetadata {
		tk := key
		tv := val
		v.ProviderMetadata[tk] = tv
	}

	return v
}

// NewB2cNotifierB2CValidationNotificationPayload builds a payments service
// b2cNotifier endpoint payload.
func NewB2cNotifierB2CValidationNotificationPayload(body *B2cNotifierRequestBody) *payments.B2CValidationNotificationPayload {
	v := &payments.B2CValidationNotificationPayload{
		TransactionID:   body.TransactionID,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
		SourceIPAddress: body.SourceIPAddress,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// ValidatePaymentNotifierRequestBody runs the validations defined on
// PaymentNotifierRequestBody
func ValidatePaymentNotifierRequestBody(body *PaymentNotifierRequestBody) (err error) {
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transactionId", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.Provider == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider", "body"))
	}
	if body.ProviderChannel == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerChannel", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.SourceType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceType", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.DestinationType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destinationType", "body"))
	}
	if body.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destination", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.RequestMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requestMetadata", "body"))
	}
	if body.ProviderMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
	}
	if body.Category != nil {
		if !(*body.Category == "BankCheckout" || *body.Category == "CardCheckout" || *body.Category == "MobileCheckout" || *body.Category == "MobileC2B" || *body.Category == "MobileB2C" || *body.Category == "MobileB2B" || *body.Category == "BankTransfer" || *body.Category == "WalletTransfer" || *body.Category == "UserStashTopup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
		}
	}
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "Segovia" || *body.Provider == "Flutterwave" || *body.Provider == "Admin" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
		}
	}
	if body.SourceType != nil {
		if !(*body.SourceType == "PhoneNumber" || *body.SourceType == "BankAccount" || *body.SourceType == "Card" || *body.SourceType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.sourceType", *body.SourceType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
	}
	if body.DestinationType != nil {
		if !(*body.DestinationType == "PhoneNumber" || *body.DestinationType == "BankAccount" || *body.DestinationType == "Card" || *body.DestinationType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destinationType", *body.DestinationType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateC2bNotifierRequestBody runs the validations defined on
// C2bNotifierRequestBody
func ValidateC2bNotifierRequestBody(body *C2bNotifierRequestBody) (err error) {
	if body.Provider == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.ProviderMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
	}
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "TigoTanzania" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "TigoTanzania", "Athena"}))
		}
	}
	return
}
