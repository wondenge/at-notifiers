// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments HTTP server
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	payments "github.com/wondenge/at-notifiers/gen/payments"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the payments service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	PaymentNotifier http.Handler
	C2bNotifier     http.Handler
	B2cNotifier     http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the payments service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *payments.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"PaymentNotifier", "POST", "/callbacks/africastalking/payments/events"},
			{"C2bNotifier", "POST", "/callbacks/africastalking/payments/c2b/validation"},
			{"B2cNotifier", "POST", "/callbacks/africastalking/payments/b2c/validation"},
		},
		PaymentNotifier: NewPaymentNotifierHandler(e.PaymentNotifier, mux, decoder, encoder, errhandler, formatter),
		C2bNotifier:     NewC2bNotifierHandler(e.C2bNotifier, mux, decoder, encoder, errhandler, formatter),
		B2cNotifier:     NewB2cNotifierHandler(e.B2cNotifier, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "payments" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.PaymentNotifier = m(s.PaymentNotifier)
	s.C2bNotifier = m(s.C2bNotifier)
	s.B2cNotifier = m(s.B2cNotifier)
}

// Mount configures the mux to serve the payments endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountPaymentNotifierHandler(mux, h.PaymentNotifier)
	MountC2bNotifierHandler(mux, h.C2bNotifier)
	MountB2cNotifierHandler(mux, h.B2cNotifier)
}

// MountPaymentNotifierHandler configures the mux to serve the "payments"
// service "paymentNotifier" endpoint.
func MountPaymentNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/events", f)
}

// NewPaymentNotifierHandler creates a HTTP handler which loads the HTTP
// request and calls the "payments" service "paymentNotifier" endpoint.
func NewPaymentNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePaymentNotifierRequest(mux, decoder)
		encodeResponse = EncodePaymentNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "paymentNotifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "payments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountC2bNotifierHandler configures the mux to serve the "payments" service
// "c2bNotifier" endpoint.
func MountC2bNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/c2b/validation", f)
}

// NewC2bNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "payments" service "c2bNotifier" endpoint.
func NewC2bNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeC2bNotifierRequest(mux, decoder)
		encodeResponse = EncodeC2bNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "c2bNotifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "payments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountB2cNotifierHandler configures the mux to serve the "payments" service
// "b2cNotifier" endpoint.
func MountB2cNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/b2c/validation", f)
}

// NewB2cNotifierHandler creates a HTTP handler which loads the HTTP request
// and calls the "payments" service "b2cNotifier" endpoint.
func NewB2cNotifierHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeB2cNotifierRequest(mux, decoder)
		encodeResponse = EncodeB2cNotifierResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "b2cNotifier")
		ctx = context.WithValue(ctx, goa.ServiceKey, "payments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
