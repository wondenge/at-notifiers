// Code generated by goa v3.1.3, DO NOT EDIT.
//
// airtime HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	airtime "github.com/wondenge/at-notifiers/gen/airtime"
	goa "goa.design/goa/v3/pkg"
)

// ValidationRequestBody is the type of the "airtime" service "validation"
// endpoint HTTP request body.
type ValidationRequestBody struct {
	// The transaction id within Africaâ€™s Talking.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// The phone number of the mobile subscriber receiving the airtime.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount - in the provided currency - that the client will receive.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// StatusRequestBody is the type of the "airtime" service "status" endpoint
// HTTP request body.
type StatusRequestBody struct {
	// The request ID sent back as a response to the airtime send request.
	RequestID *string `form:"requestId,omitempty" json:"requestId,omitempty" xml:"requestId,omitempty"`
	// The Transaction status.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// ValidationResponseBody is the type of the "airtime" service "validation"
// endpoint HTTP response body.
type ValidationResponseBody struct {
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewValidationResponseBody builds the HTTP response body from the result of
// the "validation" endpoint of the "airtime" service.
func NewValidationResponseBody(res *airtime.AirtimeValidationResponse) *ValidationResponseBody {
	body := &ValidationResponseBody{
		Status: res.Status,
	}
	return body
}

// NewValidationAirtimeValidationPayload builds a airtime service validation
// endpoint payload.
func NewValidationAirtimeValidationPayload(body *ValidationRequestBody) *airtime.AirtimeValidationPayload {
	v := &airtime.AirtimeValidationPayload{
		TransactionID: body.TransactionID,
		PhoneNumber:   body.PhoneNumber,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
	}

	return v
}

// NewStatusAirtimeStatus builds a airtime service status endpoint payload.
func NewStatusAirtimeStatus(body *StatusRequestBody) *airtime.AirtimeStatus {
	v := &airtime.AirtimeStatus{
		RequestID: body.RequestID,
		Status:    body.Status,
	}

	return v
}

// ValidateStatusRequestBody runs the validations defined on StatusRequestBody
func ValidateStatusRequestBody(body *StatusRequestBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Success" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}
