// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking service
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package africastalking

import (
	"context"

	africastalkingviews "github.com/wondenge/at-notifiers/gen/africastalking/views"
)

// Service is the africastalking service interface.
type Service interface {
	// Adds new SMS Delivery Report to our callback URL and return its ID.
	SmsDeliveryReport(context.Context, *DeliveryReport) (res string, err error)
	// Adds new SMS Incoming Message to our callback URL and return its ID.
	SmsIncomingMessage(context.Context, *IncomingMessage) (res string, err error)
	// Adds new SMS Bulk OptOut to our callback URL and return its ID.
	SmsBulkOptout(context.Context, *BulkSMSOptOut) (res string, err error)
	// Adds new SMS subscription to our callback URL and return its ID.
	SmsSubscription(context.Context, *SubscriptionNotification) (res string, err error)
	// Adds new Voice Notification to our callback URL and return its ID.
	VoiceNotification(context.Context, *VoiceNotification1) (res string, err error)
	// Adds new Event Notification to our callback URL and return its ID.
	TransferEvent(context.Context, *CallTransferEvent) (res string, err error)
	// Adds new USSD Notification to our callback URL and return its ID.
	UssdNotifier(context.Context, *USSDPayload) (res *USSDResponse, err error)
	// Adds new Airtime Validation Notification to our callback URL and return its
	// ID.
	ValidationNotifier(context.Context, *AirtimeValidationPayload) (res *AirtimeValidationResponse, err error)
	// Adds new Airtime Status Notification to our callback URL and return its ID.
	StatusNotifier(context.Context, *AirtimeStatus) (res string, err error)
	// Adds new Payment Notification to our callback URL and return its ID.
	PaymentNotifier(context.Context, *PaymentNotification) (res string, err error)
	// Adds new C2B Validation Notification to our callback URL and return its ID.
	C2bValidationNotifier(context.Context, *C2BValidationNotification) (res string, err error)
	// Adds new B2C Validation Notification to our callback URL and return its ID.
	B2cValidationNotifier(context.Context, *B2CValidationNotificationPayload) (res *B2CValidationNotificationResponse, err error)
	// Adds new IoT Notification to our callback URL and return its ID.
	IotNotifier(context.Context, *IoTNotification) (res string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "africastalking"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [13]string{"sms_delivery_report", "sms_incoming_message", "sms_bulk_optout", "sms_subscription", "voice_notification", "transfer_event", "ussd_notifier", "validation_notifier", "status_notifier", "payment_notifier", "c2b_validation_notifier", "b2c_validation_notifier", "iot_notifier"}

// DeliveryReport is the payload type of the africastalking service
// sms_delivery_report method.
type DeliveryReport struct {
	// A unique identifier for each message.
	ID *string
	// The status of the message.
	Status *string
	// Mobile phone number message was sent out to.
	PhoneNumber *string
	// A unique identifier for the Telco that handled the message.
	NetworkCode *string
	// Only provided if status is Rejected or Failed.
	FailureReason *string
	// Number of times the request to send a message to the device was retried
	// before it succeeded or definitely failed.
	RetryCount *string
}

// IncomingMessage is the payload type of the africastalking service
// sms_incoming_message method.
type IncomingMessage struct {
	// The date and time when the message was received.
	Date *string
	// The number that sent the message.
	From *string
	// The internal ID that we use to store this message.
	ID *string
	// Parameter required when responding to an on-demand user request with a
	// premium message.
	LinkID *string
	// The message content.
	Text *string
	// The number to which the message was sent.
	To *string
	// A unique identifier for the telco that handled the message.
	NetworkCode *string
}

// BulkSMSOptOut is the payload type of the africastalking service
// sms_bulk_optout method.
type BulkSMSOptOut struct {
	// Shortcode/Alphanumeric Sender ID the user opted out from.
	SenderID *string
	// Mobile phone number of the subscriber who opted out.
	PhoneNumber *string
}

// SubscriptionNotification is the payload type of the africastalking service
// sms_subscription method.
type SubscriptionNotification struct {
	// Mobile phone number to subscribe or unsubscribe.
	PhoneNumber *string
	// The short code that has this product.
	ShortCode *string
	// The product keyword that the user has subscribed or unsubscribed from.
	Keyword *string
	// The type of the update.
	UpdateType *string
}

// VoiceNotification1 is the payload type of the africastalking service
// voice_notification method.
type VoiceNotification1 struct {
	// Lets us know whether the call is in session state
	IsActive string
	// A unique identifier generated during each call session
	SessionID *string
	// Whether this is an inbound or outbound call
	Direction *string
	// Africa’s Talking phone number, in international format
	DestinationNumber *string
	// The phone number of the phone user in the call, in international format.
	CallerNumber *string
	// The code of the country the callerNumber is calling from.
	CallerCountryCode *string
	// The time the call began.
	CallStartTime *string
	// The digits that a user enters in response to a getDigits request
	DtmfDigits *string
	// The URL of the recording made for this call
	RecordingURL *string
	// The duration of the call in seconds.
	DurationInSeconds *string
	// The currency used to bill this call (e.g KES, USD, GBP).
	CurrencyCode *string
	// The total cost of the call.
	Amount *string
	// The final status of the call.
	CallSessionState *string
	// The number which a call was forwarded to if the Dial action was used.
	DialDestinationNumber *string
	// The duration of the dialed call if the Dial action was used.
	DialDurationInSeconds *string
	// The time the dial action began if the Dial action was used.
	DialStartTime *string
	// The reason a call could have ended
	HangupCause *string
}

// CallTransferEvent is the payload type of the africastalking service
// transfer_event method.
type CallTransferEvent struct {
	CallSessionState *string
	IsActive         string
	Status           *string
	// +2347XXXXXXXXX:20, (20 is the duration in seconds)
	CallTransferParam *string
	// Number call was transferred to
	CallTransferredToNumber *string
	CallTransferState       *string
	CallTransferHangupCause *string
}

// USSDPayload is the payload type of the africastalking service ussd_notifier
// method.
type USSDPayload struct {
	// A unique value generated when the session starts.
	SessionID *string
	// Mobile number of the subscriber interacting with USSD application.
	PhoneNumber *string
	// Telco of the mobile number interacting with USSD application.
	NetworkCode *string
	// USSD code assigned to application.
	ServiceCode *string
	// Shows the user input.
	Text *string
}

// USSDResponse is the result type of the africastalking service ussd_notifier
// method.
type USSDResponse struct {
	// Plain text response back to AT gateway
	Response *string
}

// AirtimeValidationPayload is the payload type of the africastalking service
// validation_notifier method.
type AirtimeValidationPayload struct {
	// The transaction id within Africa’s Talking.
	TransactionID *string
	// The phone number of the mobile subscriber receiving the airtime.
	PhoneNumber *string
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string
	// Amount - in the provided currency - that the client will receive.
	Amount *float64
}

// AirtimeValidationResponse is the result type of the africastalking service
// validation_notifier method.
type AirtimeValidationResponse struct {
	Status *string
}

// AirtimeStatus is the payload type of the africastalking service
// status_notifier method.
type AirtimeStatus struct {
	// The request ID sent back as a response to the airtime send request.
	RequestID *string
	// The Transaction status.
	Status *string
}

// PaymentNotification is the payload type of the africastalking service
// payment_notifier method.
type PaymentNotification struct {
	// Unique transactionId generated for every payment.
	TransactionID string
	// Category of the payment.
	Category string
	// Payment provider that facilitated this transaction.
	Provider string
	// Unique ID generated by the payment provider for this transaction.
	ProviderRefID *string
	// Name or number of channel that used to facilitate this payment.
	ProviderChannel string
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string
	// Africa’s Talking Payment Product used to facilitate this transaction.
	ProductName string
	// Type of party providing the funds for this transaction (the Debit Party).
	SourceType string
	// Unique identifier of the party that is providing the funds for this
	// transaction.
	Source string
	// Unique identifier of the party receiving funds in this transaction (the
	// Credit Party).
	DestinationType string
	// Unique identifier of the party  receiving the funds for this transaction.
	Destination string
	// Value being exchanged in this transaction.
	Value string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// Fee charged by a payment provider to facilitate this transaction.
	ProviderFee *string
	// The final status of this transaction
	Status string
	// A detailed description of this transaction.
	Description string
	// Any metadata that was sent by your application when it initiated this
	// transaction.
	RequestMetadata string
	// Any additional data that we receive from a payment provider for a particular
	// transaction.
	ProviderMetadata string
	// The date and time when a successful transaction was completed.
	TransactionDate *string
}

// C2BValidationNotification is the payload type of the africastalking service
// c2b_validation_notifier method.
type C2BValidationNotification struct {
	// Payment provider that is facilitating this transaction
	Provider string
	// Account name used by a mobile subscriber to initiate this transaction.
	ClientAccount *string
	// Identifies the Africa’s Talking Payment Product used to facilitate this
	// transaction.
	ProductName string
	// Phone number of the mobile subscriber who is initiating the C2B transaction.
	PhoneNumber string
	// Value being exchanged in this transaction
	Value string
	// Additional data received from a payment provider for a particular transaction
	ProviderMetadata map[string]string
}

// B2CValidationNotificationPayload is the payload type of the africastalking
// service b2c_validation_notifier method.
type B2CValidationNotificationPayload struct {
	// The transaction id within Africa’s Talking.
	TransactionID *string
	// The phone number of the mobile subscriber receiving the B2C payment.
	PhoneNumber *string
	// The 3-digist ISO format currency for the value of this transaction
	CurrencyCode *string
	// Amount - in the provided currency - that the client will receive.
	Amount *float64
	// The IPv4 address that initiated the B2C transaction.
	SourceIPAddress *string
	// A map of metadata associated with this request.
	Metadata map[string]string
}

// B2CValidationNotificationResponse is the result type of the africastalking
// service b2c_validation_notifier method.
type B2CValidationNotificationResponse struct {
	Status *string
}

// IoTNotification is the payload type of the africastalking service
// iot_notifier method.
type IoTNotification struct {
	// The MQTT packet sent by the publishing device.
	Payload *string
	// Message channel to which the message was sent by the publishing MQTT client
	Topic *string
}

// NewUSSDResponse initializes result type USSDResponse from viewed result type
// USSDResponse.
func NewUSSDResponse(vres *africastalkingviews.USSDResponse) *USSDResponse {
	return newUSSDResponse(vres.Projected)
}

// NewViewedUSSDResponse initializes viewed result type USSDResponse from
// result type USSDResponse using the given view.
func NewViewedUSSDResponse(res *USSDResponse, view string) *africastalkingviews.USSDResponse {
	p := newUSSDResponseView(res)
	return &africastalkingviews.USSDResponse{Projected: p, View: "default"}
}

// newUSSDResponse converts projected type USSDResponse to service type
// USSDResponse.
func newUSSDResponse(vres *africastalkingviews.USSDResponseView) *USSDResponse {
	res := &USSDResponse{
		Response: vres.Response,
	}
	return res
}

// newUSSDResponseView projects result type USSDResponse to projected type
// USSDResponseView using the "default" view.
func newUSSDResponseView(res *USSDResponse) *africastalkingviews.USSDResponseView {
	vres := &africastalkingviews.USSDResponseView{
		Response: res.Response,
	}
	return vres
}
