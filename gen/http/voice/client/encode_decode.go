// Code generated by goa v3.1.3, DO NOT EDIT.
//
// voice HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	voice "github.com/wondenge/at-notifiers/gen/voice"
	goahttp "goa.design/goa/v3/http"
)

// BuildVoiceNotifierRequest instantiates a HTTP request object with method and
// path set to call the "voice" service "voiceNotifier" endpoint
func (c *Client) BuildVoiceNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VoiceNotifierVoicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("voice", "voiceNotifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVoiceNotifierRequest returns an encoder for requests sent to the voice
// voiceNotifier server.
func EncodeVoiceNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*voice.VoiceNotification)
		if !ok {
			return goahttp.ErrInvalidType("voice", "voiceNotifier", "*voice.VoiceNotification", v)
		}
		body := NewVoiceNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("voice", "voiceNotifier", err)
		}
		return nil
	}
}

// DecodeVoiceNotifierResponse returns a decoder for responses returned by the
// voice voiceNotifier endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeVoiceNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("voice", "voiceNotifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("voice", "voiceNotifier", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferEventsRequest instantiates a HTTP request object with method
// and path set to call the "voice" service "transferEvents" endpoint
func (c *Client) BuildTransferEventsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferEventsVoicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("voice", "transferEvents", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferEventsRequest returns an encoder for requests sent to the
// voice transferEvents server.
func EncodeTransferEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*voice.CallTransferEvent)
		if !ok {
			return goahttp.ErrInvalidType("voice", "transferEvents", "*voice.CallTransferEvent", v)
		}
		body := NewTransferEventsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("voice", "transferEvents", err)
		}
		return nil
	}
}

// DecodeTransferEventsResponse returns a decoder for responses returned by the
// voice transferEvents endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTransferEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("voice", "transferEvents", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("voice", "transferEvents", resp.StatusCode, string(body))
		}
	}
}
