// Code generated by goa v3.1.3, DO NOT EDIT.
//
// sms endpoints
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package sms

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "sms" service endpoints.
type Endpoints struct {
	DeliveryReport  endpoint.Endpoint
	IncomingMessage endpoint.Endpoint
	BulkSMSOptOut   endpoint.Endpoint
	SubNotifier     endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "sms" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		DeliveryReport:  NewDeliveryReportEndpoint(s),
		IncomingMessage: NewIncomingMessageEndpoint(s),
		BulkSMSOptOut:   NewBulkSMSOptOutEndpoint(s),
		SubNotifier:     NewSubNotifierEndpoint(s),
	}
}

// Use applies the given middleware to all the "sms" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.DeliveryReport = m(e.DeliveryReport)
	e.IncomingMessage = m(e.IncomingMessage)
	e.BulkSMSOptOut = m(e.BulkSMSOptOut)
	e.SubNotifier = m(e.SubNotifier)
}

// NewDeliveryReportEndpoint returns an endpoint function that calls the method
// "deliveryReport" of service "sms".
func NewDeliveryReportEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeliveryReport1)
		return s.DeliveryReport(ctx, p)
	}
}

// NewIncomingMessageEndpoint returns an endpoint function that calls the
// method "incomingMessage" of service "sms".
func NewIncomingMessageEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IncomingMessage1)
		return s.IncomingMessage(ctx, p)
	}
}

// NewBulkSMSOptOutEndpoint returns an endpoint function that calls the method
// "bulkSMSOptOut" of service "sms".
func NewBulkSMSOptOutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BulkSMSOptOut1)
		return s.BulkSMSOptOut(ctx, p)
	}
}

// NewSubNotifierEndpoint returns an endpoint function that calls the method
// "subNotifier" of service "sms".
func NewSubNotifierEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SubscriptionNotification)
		return s.SubNotifier(ctx, p)
	}
}
