// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	africastalking "github.com/wondenge/at-notifiers/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-notifiers/gen/africastalking/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildSmsDeliveryReportRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "sms_delivery_report"
// endpoint
func (c *Client) BuildSmsDeliveryReportRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SmsDeliveryReportAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "sms_delivery_report", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSmsDeliveryReportRequest returns an encoder for requests sent to the
// africastalking sms_delivery_report server.
func EncodeSmsDeliveryReportRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.DeliveryReport)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "sms_delivery_report", "*africastalking.DeliveryReport", v)
		}
		body := NewSmsDeliveryReportRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "sms_delivery_report", err)
		}
		return nil
	}
}

// DecodeSmsDeliveryReportResponse returns a decoder for responses returned by
// the africastalking sms_delivery_report endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeSmsDeliveryReportResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "sms_delivery_report", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "sms_delivery_report", resp.StatusCode, string(body))
		}
	}
}

// BuildSmsIncomingMessageRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "sms_incoming_message" endpoint
func (c *Client) BuildSmsIncomingMessageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SmsIncomingMessageAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "sms_incoming_message", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSmsIncomingMessageRequest returns an encoder for requests sent to the
// africastalking sms_incoming_message server.
func EncodeSmsIncomingMessageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.IncomingMessage)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "sms_incoming_message", "*africastalking.IncomingMessage", v)
		}
		body := NewSmsIncomingMessageRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "sms_incoming_message", err)
		}
		return nil
	}
}

// DecodeSmsIncomingMessageResponse returns a decoder for responses returned by
// the africastalking sms_incoming_message endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeSmsIncomingMessageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "sms_incoming_message", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "sms_incoming_message", resp.StatusCode, string(body))
		}
	}
}

// BuildSmsBulkOptoutRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "sms_bulk_optout" endpoint
func (c *Client) BuildSmsBulkOptoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SmsBulkOptoutAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "sms_bulk_optout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSmsBulkOptoutRequest returns an encoder for requests sent to the
// africastalking sms_bulk_optout server.
func EncodeSmsBulkOptoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.BulkSMSOptOut)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "sms_bulk_optout", "*africastalking.BulkSMSOptOut", v)
		}
		body := NewSmsBulkOptoutRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "sms_bulk_optout", err)
		}
		return nil
	}
}

// DecodeSmsBulkOptoutResponse returns a decoder for responses returned by the
// africastalking sms_bulk_optout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeSmsBulkOptoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "sms_bulk_optout", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "sms_bulk_optout", resp.StatusCode, string(body))
		}
	}
}

// BuildSmsSubscriptionRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "sms_subscription" endpoint
func (c *Client) BuildSmsSubscriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SmsSubscriptionAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "sms_subscription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSmsSubscriptionRequest returns an encoder for requests sent to the
// africastalking sms_subscription server.
func EncodeSmsSubscriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.SubscriptionNotification)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "sms_subscription", "*africastalking.SubscriptionNotification", v)
		}
		body := NewSmsSubscriptionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "sms_subscription", err)
		}
		return nil
	}
}

// DecodeSmsSubscriptionResponse returns a decoder for responses returned by
// the africastalking sms_subscription endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeSmsSubscriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "sms_subscription", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "sms_subscription", resp.StatusCode, string(body))
		}
	}
}

// BuildVoiceNotificationRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "voice_notification"
// endpoint
func (c *Client) BuildVoiceNotificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VoiceNotificationAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "voice_notification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVoiceNotificationRequest returns an encoder for requests sent to the
// africastalking voice_notification server.
func EncodeVoiceNotificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.VoiceNotification1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "voice_notification", "*africastalking.VoiceNotification1", v)
		}
		body := NewVoiceNotificationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "voice_notification", err)
		}
		return nil
	}
}

// DecodeVoiceNotificationResponse returns a decoder for responses returned by
// the africastalking voice_notification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeVoiceNotificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "voice_notification", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "voice_notification", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferEventRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "transfer_event" endpoint
func (c *Client) BuildTransferEventRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferEventAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "transfer_event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferEventRequest returns an encoder for requests sent to the
// africastalking transfer_event server.
func EncodeTransferEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.CallTransferEvent)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "transfer_event", "*africastalking.CallTransferEvent", v)
		}
		body := NewTransferEventRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "transfer_event", err)
		}
		return nil
	}
}

// DecodeTransferEventResponse returns a decoder for responses returned by the
// africastalking transfer_event endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeTransferEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "transfer_event", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "transfer_event", resp.StatusCode, string(body))
		}
	}
}

// BuildUssdNotifierRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "ussd_notifier" endpoint
func (c *Client) BuildUssdNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UssdNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "ussd_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUssdNotifierRequest returns an encoder for requests sent to the
// africastalking ussd_notifier server.
func EncodeUssdNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.USSDPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "ussd_notifier", "*africastalking.USSDPayload", v)
		}
		body := NewUssdNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "ussd_notifier", err)
		}
		return nil
	}
}

// DecodeUssdNotifierResponse returns a decoder for responses returned by the
// africastalking ussd_notifier endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUssdNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body UssdNotifierResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "ussd_notifier", err)
			}
			p := NewUssdNotifierUSSDResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.USSDResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateUSSDResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "ussd_notifier", err)
			}
			res := africastalking.NewUSSDResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "ussd_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildValidationNotifierRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "validation_notifier" endpoint
func (c *Client) BuildValidationNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ValidationNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "validation_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeValidationNotifierRequest returns an encoder for requests sent to the
// africastalking validation_notifier server.
func EncodeValidationNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.AirtimeValidationPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "validation_notifier", "*africastalking.AirtimeValidationPayload", v)
		}
		body := NewValidationNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "validation_notifier", err)
		}
		return nil
	}
}

// DecodeValidationNotifierResponse returns a decoder for responses returned by
// the africastalking validation_notifier endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeValidationNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body ValidationNotifierResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "validation_notifier", err)
			}
			err = ValidateValidationNotifierResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "validation_notifier", err)
			}
			res := NewValidationNotifierAirtimeValidationResponseCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "validation_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusNotifierRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "status_notifier" endpoint
func (c *Client) BuildStatusNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "status_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStatusNotifierRequest returns an encoder for requests sent to the
// africastalking status_notifier server.
func EncodeStatusNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.AirtimeStatus)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "status_notifier", "*africastalking.AirtimeStatus", v)
		}
		body := NewStatusNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "status_notifier", err)
		}
		return nil
	}
}

// DecodeStatusNotifierResponse returns a decoder for responses returned by the
// africastalking status_notifier endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeStatusNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "status_notifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "status_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildPaymentNotifierRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "payment_notifier" endpoint
func (c *Client) BuildPaymentNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PaymentNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "payment_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePaymentNotifierRequest returns an encoder for requests sent to the
// africastalking payment_notifier server.
func EncodePaymentNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.PaymentNotification)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "payment_notifier", "*africastalking.PaymentNotification", v)
		}
		body := NewPaymentNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "payment_notifier", err)
		}
		return nil
	}
}

// DecodePaymentNotifierResponse returns a decoder for responses returned by
// the africastalking payment_notifier endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodePaymentNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "payment_notifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "payment_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildC2bValidationNotifierRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "c2b_validation_notifier" endpoint
func (c *Client) BuildC2bValidationNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: C2bValidationNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "c2b_validation_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeC2bValidationNotifierRequest returns an encoder for requests sent to
// the africastalking c2b_validation_notifier server.
func EncodeC2bValidationNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.C2BValidationNotification)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "c2b_validation_notifier", "*africastalking.C2BValidationNotification", v)
		}
		body := NewC2bValidationNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "c2b_validation_notifier", err)
		}
		return nil
	}
}

// DecodeC2bValidationNotifierResponse returns a decoder for responses returned
// by the africastalking c2b_validation_notifier endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeC2bValidationNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "c2b_validation_notifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "c2b_validation_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildB2cValidationNotifierRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "b2c_validation_notifier" endpoint
func (c *Client) BuildB2cValidationNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: B2cValidationNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "b2c_validation_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeB2cValidationNotifierRequest returns an encoder for requests sent to
// the africastalking b2c_validation_notifier server.
func EncodeB2cValidationNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.B2CValidationNotificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "b2c_validation_notifier", "*africastalking.B2CValidationNotificationPayload", v)
		}
		body := NewB2cValidationNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "b2c_validation_notifier", err)
		}
		return nil
	}
}

// DecodeB2cValidationNotifierResponse returns a decoder for responses returned
// by the africastalking b2c_validation_notifier endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeB2cValidationNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body B2cValidationNotifierResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "b2c_validation_notifier", err)
			}
			err = ValidateB2cValidationNotifierResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "b2c_validation_notifier", err)
			}
			res := NewB2cValidationNotifierB2CValidationNotificationResponseCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "b2c_validation_notifier", resp.StatusCode, string(body))
		}
	}
}

// BuildIotNotifierRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "iot_notifier" endpoint
func (c *Client) BuildIotNotifierRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IotNotifierAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "iot_notifier", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIotNotifierRequest returns an encoder for requests sent to the
// africastalking iot_notifier server.
func EncodeIotNotifierRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.IoTNotification)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "iot_notifier", "*africastalking.IoTNotification", v)
		}
		body := NewIotNotifierRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "iot_notifier", err)
		}
		return nil
	}
}

// DecodeIotNotifierResponse returns a decoder for responses returned by the
// africastalking iot_notifier endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeIotNotifierResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "iot_notifier", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "iot_notifier", resp.StatusCode, string(body))
		}
	}
}
