// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking client
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package africastalking

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Client is the "africastalking" service client.
type Client struct {
	SmsDeliveryReportEndpoint     endpoint.Endpoint
	SmsIncomingMessageEndpoint    endpoint.Endpoint
	SmsBulkOptoutEndpoint         endpoint.Endpoint
	SmsSubscriptionEndpoint       endpoint.Endpoint
	VoiceNotificationEndpoint     endpoint.Endpoint
	TransferEventEndpoint         endpoint.Endpoint
	UssdNotifierEndpoint          endpoint.Endpoint
	ValidationNotifierEndpoint    endpoint.Endpoint
	StatusNotifierEndpoint        endpoint.Endpoint
	PaymentNotifierEndpoint       endpoint.Endpoint
	C2bValidationNotifierEndpoint endpoint.Endpoint
	B2cValidationNotifierEndpoint endpoint.Endpoint
	IotNotifierEndpoint           endpoint.Endpoint
}

// NewClient initializes a "africastalking" service client given the endpoints.
func NewClient(smsDeliveryReport, smsIncomingMessage, smsBulkOptout, smsSubscription, voiceNotification, transferEvent, ussdNotifier, validationNotifier, statusNotifier, paymentNotifier, c2bValidationNotifier, b2cValidationNotifier, iotNotifier endpoint.Endpoint) *Client {
	return &Client{
		SmsDeliveryReportEndpoint:     smsDeliveryReport,
		SmsIncomingMessageEndpoint:    smsIncomingMessage,
		SmsBulkOptoutEndpoint:         smsBulkOptout,
		SmsSubscriptionEndpoint:       smsSubscription,
		VoiceNotificationEndpoint:     voiceNotification,
		TransferEventEndpoint:         transferEvent,
		UssdNotifierEndpoint:          ussdNotifier,
		ValidationNotifierEndpoint:    validationNotifier,
		StatusNotifierEndpoint:        statusNotifier,
		PaymentNotifierEndpoint:       paymentNotifier,
		C2bValidationNotifierEndpoint: c2bValidationNotifier,
		B2cValidationNotifierEndpoint: b2cValidationNotifier,
		IotNotifierEndpoint:           iotNotifier,
	}
}

// SmsDeliveryReport calls the "sms_delivery_report" endpoint of the
// "africastalking" service.
func (c *Client) SmsDeliveryReport(ctx context.Context, p *DeliveryReport) (res string, err error) {
	var ires interface{}
	ires, err = c.SmsDeliveryReportEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// SmsIncomingMessage calls the "sms_incoming_message" endpoint of the
// "africastalking" service.
func (c *Client) SmsIncomingMessage(ctx context.Context, p *IncomingMessage) (res string, err error) {
	var ires interface{}
	ires, err = c.SmsIncomingMessageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// SmsBulkOptout calls the "sms_bulk_optout" endpoint of the "africastalking"
// service.
func (c *Client) SmsBulkOptout(ctx context.Context, p *BulkSMSOptOut) (res string, err error) {
	var ires interface{}
	ires, err = c.SmsBulkOptoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// SmsSubscription calls the "sms_subscription" endpoint of the
// "africastalking" service.
func (c *Client) SmsSubscription(ctx context.Context, p *SubscriptionNotification) (res string, err error) {
	var ires interface{}
	ires, err = c.SmsSubscriptionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// VoiceNotification calls the "voice_notification" endpoint of the
// "africastalking" service.
func (c *Client) VoiceNotification(ctx context.Context, p *VoiceNotification1) (res string, err error) {
	var ires interface{}
	ires, err = c.VoiceNotificationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// TransferEvent calls the "transfer_event" endpoint of the "africastalking"
// service.
func (c *Client) TransferEvent(ctx context.Context, p *CallTransferEvent) (res string, err error) {
	var ires interface{}
	ires, err = c.TransferEventEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// UssdNotifier calls the "ussd_notifier" endpoint of the "africastalking"
// service.
func (c *Client) UssdNotifier(ctx context.Context, p *USSDPayload) (res *USSDResponse, err error) {
	var ires interface{}
	ires, err = c.UssdNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*USSDResponse), nil
}

// ValidationNotifier calls the "validation_notifier" endpoint of the
// "africastalking" service.
func (c *Client) ValidationNotifier(ctx context.Context, p *AirtimeValidationPayload) (res *AirtimeValidationResponse, err error) {
	var ires interface{}
	ires, err = c.ValidationNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AirtimeValidationResponse), nil
}

// StatusNotifier calls the "status_notifier" endpoint of the "africastalking"
// service.
func (c *Client) StatusNotifier(ctx context.Context, p *AirtimeStatus) (res string, err error) {
	var ires interface{}
	ires, err = c.StatusNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// PaymentNotifier calls the "payment_notifier" endpoint of the
// "africastalking" service.
func (c *Client) PaymentNotifier(ctx context.Context, p *PaymentNotification) (res string, err error) {
	var ires interface{}
	ires, err = c.PaymentNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// C2bValidationNotifier calls the "c2b_validation_notifier" endpoint of the
// "africastalking" service.
func (c *Client) C2bValidationNotifier(ctx context.Context, p *C2BValidationNotification) (res string, err error) {
	var ires interface{}
	ires, err = c.C2bValidationNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// B2cValidationNotifier calls the "b2c_validation_notifier" endpoint of the
// "africastalking" service.
func (c *Client) B2cValidationNotifier(ctx context.Context, p *B2CValidationNotificationPayload) (res *B2CValidationNotificationResponse, err error) {
	var ires interface{}
	ires, err = c.B2cValidationNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*B2CValidationNotificationResponse), nil
}

// IotNotifier calls the "iot_notifier" endpoint of the "africastalking"
// service.
func (c *Client) IotNotifier(ctx context.Context, p *IoTNotification) (res string, err error) {
	var ires interface{}
	ires, err = c.IotNotifierEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
