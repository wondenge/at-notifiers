// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package client

import (
	"encoding/json"
	"fmt"

	payments "github.com/wondenge/at-notifiers/gen/payments"
	goa "goa.design/goa/v3/pkg"
)

// BuildPaymentNotifierPayload builds the payload for the payments
// paymentNotifier endpoint from CLI flags.
func BuildPaymentNotifierPayload(paymentsPaymentNotifierBody string) (*payments.PaymentNotification, error) {
	var err error
	var body PaymentNotifierRequestBody
	{
		err = json.Unmarshal([]byte(paymentsPaymentNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"category\": \"MobileB2B\",\n      \"clientAccount\": \"Corrupti ducimus autem cum eum exercitationem.\",\n      \"description\": \"Hic sequi quis nihil asperiores culpa.\",\n      \"destination\": \"Eveniet doloribus.\",\n      \"destinationType\": \"Card\",\n      \"productName\": \"Molestiae animi officiis.\",\n      \"provider\": \"Athena\",\n      \"providerChannel\": \"Velit eveniet est veritatis.\",\n      \"providerFee\": \"Minus corrupti voluptatem eos.\",\n      \"providerMetadata\": \"Sunt nemo ex esse eveniet quas.\",\n      \"providerRefId\": \"Vitae qui qui omnis.\",\n      \"requestMetadata\": \"Corrupti corrupti nobis corporis qui.\",\n      \"source\": \"Fugiat quod nemo natus.\",\n      \"sourceType\": \"PhoneNumber\",\n      \"status\": \"Success\",\n      \"transactionDate\": \"Est quibusdam hic ut.\",\n      \"transactionFee\": \"Quas est nostrum incidunt impedit vel.\",\n      \"transactionId\": \"In eum.\",\n      \"value\": \"Ut eveniet.\"\n   }'")
		}
		if !(body.Category == "BankCheckout" || body.Category == "CardCheckout" || body.Category == "MobileCheckout" || body.Category == "MobileC2B" || body.Category == "MobileB2C" || body.Category == "MobileB2B" || body.Category == "BankTransfer" || body.Category == "WalletTransfer" || body.Category == "UserStashTopup") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
		}
		if !(body.Provider == "Mpesa" || body.Provider == "Segovia" || body.Provider == "Flutterwave" || body.Provider == "Admin" || body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
		}
		if !(body.SourceType == "PhoneNumber" || body.SourceType == "BankAccount" || body.SourceType == "Card" || body.SourceType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.sourceType", body.SourceType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
		if !(body.DestinationType == "PhoneNumber" || body.DestinationType == "BankAccount" || body.DestinationType == "Card" || body.DestinationType == "Wallet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destinationType", body.DestinationType, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
		}
		if !(body.Status == "Success" || body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{"Success", "Failed"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &payments.PaymentNotification{
		TransactionID:    body.TransactionID,
		Category:         body.Category,
		Provider:         body.Provider,
		ProviderRefID:    body.ProviderRefID,
		ProviderChannel:  body.ProviderChannel,
		ClientAccount:    body.ClientAccount,
		ProductName:      body.ProductName,
		SourceType:       body.SourceType,
		Source:           body.Source,
		DestinationType:  body.DestinationType,
		Destination:      body.Destination,
		Value:            body.Value,
		TransactionFee:   body.TransactionFee,
		ProviderFee:      body.ProviderFee,
		Status:           body.Status,
		Description:      body.Description,
		RequestMetadata:  body.RequestMetadata,
		ProviderMetadata: body.ProviderMetadata,
		TransactionDate:  body.TransactionDate,
	}

	return v, nil
}

// BuildC2bNotifierPayload builds the payload for the payments c2bNotifier
// endpoint from CLI flags.
func BuildC2bNotifierPayload(paymentsC2bNotifierBody string) (*payments.C2BValidationNotification, error) {
	var err error
	var body C2bNotifierRequestBody
	{
		err = json.Unmarshal([]byte(paymentsC2bNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"clientAccount\": \"Culpa soluta quibusdam corporis rerum deleniti.\",\n      \"phoneNumber\": \"Sequi non sit aliquid.\",\n      \"productName\": \"Magni est aspernatur qui velit.\",\n      \"provider\": \"TigoTanzania\",\n      \"providerMetadata\": {\n         \"Molestias laborum magnam numquam nostrum accusamus.\": \"Aliquam ut vel.\"\n      },\n      \"value\": \"Provident nam non est quia et nobis.\"\n   }'")
		}
		if body.ProviderMetadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("providerMetadata", "body"))
		}
		if !(body.Provider == "Mpesa" || body.Provider == "TigoTanzania" || body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", body.Provider, []interface{}{"Mpesa", "TigoTanzania", "Athena"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &payments.C2BValidationNotification{
		Provider:      body.Provider,
		ClientAccount: body.ClientAccount,
		ProductName:   body.ProductName,
		PhoneNumber:   body.PhoneNumber,
		Value:         body.Value,
	}
	if body.ProviderMetadata != nil {
		v.ProviderMetadata = make(map[string]string, len(body.ProviderMetadata))
		for key, val := range body.ProviderMetadata {
			tk := key
			tv := val
			v.ProviderMetadata[tk] = tv
		}
	}

	return v, nil
}

// BuildB2cNotifierPayload builds the payload for the payments b2cNotifier
// endpoint from CLI flags.
func BuildB2cNotifierPayload(paymentsB2cNotifierBody string) (*payments.B2CValidationNotificationPayload, error) {
	var err error
	var body B2cNotifierRequestBody
	{
		err = json.Unmarshal([]byte(paymentsB2cNotifierBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 500,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Sit sit id voluptatibus occaecati nostrum.\": \"Fugiat sunt sed provident eos sunt.\"\n      },\n      \"phoneNumber\": \"+254711XXXYYY\",\n      \"sourceIpAddress\": \"12.34.56.78\",\n      \"transactionId\": \"SomeTransactionID\"\n   }'")
		}
	}
	v := &payments.B2CValidationNotificationPayload{
		TransactionID:   body.TransactionID,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
		SourceIPAddress: body.SourceIPAddress,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}
