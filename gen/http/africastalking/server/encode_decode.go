// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"context"
	"io"
	"net/http"

	africastalking "github.com/wondenge/at-notifiers/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-notifiers/gen/africastalking/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeDeliveryReportNotifierResponse returns an encoder for responses
// returned by the africastalking delivery_report_notifier endpoint.
func EncodeDeliveryReportNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeDeliveryReportNotifierRequest returns a decoder for requests sent to
// the africastalking delivery_report_notifier endpoint.
func DecodeDeliveryReportNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeliveryReportNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeliveryReportNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeliveryReportNotifierDeliveryReportPayload(&body)

		return payload, nil
	}
}

// EncodeIncomingMessageNotifierResponse returns an encoder for responses
// returned by the africastalking incoming_message_notifier endpoint.
func EncodeIncomingMessageNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeIncomingMessageNotifierRequest returns a decoder for requests sent to
// the africastalking incoming_message_notifier endpoint.
func DecodeIncomingMessageNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body IncomingMessageNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateIncomingMessageNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewIncomingMessageNotifierIncomingMessagePayload(&body)

		return payload, nil
	}
}

// EncodeBulkOptOutNotifierResponse returns an encoder for responses returned
// by the africastalking bulk_optOut_notifier endpoint.
func EncodeBulkOptOutNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeBulkOptOutNotifierRequest returns a decoder for requests sent to the
// africastalking bulk_optOut_notifier endpoint.
func DecodeBulkOptOutNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BulkOptOutNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewBulkOptOutNotifierBulkSMSOptOutPayload(&body)

		return payload, nil
	}
}

// EncodeSubNotifierResponse returns an encoder for responses returned by the
// africastalking sub_notifier endpoint.
func EncodeSubNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeSubNotifierRequest returns a decoder for requests sent to the
// africastalking sub_notifier endpoint.
func DecodeSubNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SubNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSubNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSubNotifierSubNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeVoiceNotifierResponse returns an encoder for responses returned by the
// africastalking voice_notifier endpoint.
func EncodeVoiceNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeVoiceNotifierRequest returns a decoder for requests sent to the
// africastalking voice_notifier endpoint.
func DecodeVoiceNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body VoiceNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateVoiceNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewVoiceNotifierVoiceNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeTransferEventNotifierResponse returns an encoder for responses
// returned by the africastalking transfer_event_notifier endpoint.
func EncodeTransferEventNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeTransferEventNotifierRequest returns a decoder for requests sent to
// the africastalking transfer_event_notifier endpoint.
func DecodeTransferEventNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TransferEventNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTransferEventNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTransferEventNotifierTransferEventPayload(&body)

		return payload, nil
	}
}

// EncodeUssdNotifierResponse returns an encoder for responses returned by the
// africastalking ussd_notifier endpoint.
func EncodeUssdNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.USSDResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := NewUssdNotifierResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeUssdNotifierRequest returns a decoder for requests sent to the
// africastalking ussd_notifier endpoint.
func DecodeUssdNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UssdNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewUssdNotifierUSSDPayload(&body)

		return payload, nil
	}
}

// EncodeValidationNotifierResponse returns an encoder for responses returned
// by the africastalking validation_notifier endpoint.
func EncodeValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalking.AirtimeValidationResponse)
		enc := encoder(ctx, w)
		body := NewValidationNotifierResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeValidationNotifierRequest returns a decoder for requests sent to the
// africastalking validation_notifier endpoint.
func DecodeValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ValidationNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewValidationNotifierAirtimeValidationPayload(&body)

		return payload, nil
	}
}

// EncodeStatusNotifierResponse returns an encoder for responses returned by
// the africastalking status_notifier endpoint.
func EncodeStatusNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeStatusNotifierRequest returns a decoder for requests sent to the
// africastalking status_notifier endpoint.
func DecodeStatusNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body StatusNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateStatusNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewStatusNotifierAirtimeStatusPayload(&body)

		return payload, nil
	}
}

// EncodePaymentNotifierResponse returns an encoder for responses returned by
// the africastalking payment_notifier endpoint.
func EncodePaymentNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodePaymentNotifierRequest returns a decoder for requests sent to the
// africastalking payment_notifier endpoint.
func DecodePaymentNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PaymentNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePaymentNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPaymentNotifierPaymentNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeC2bValidationNotifierResponse returns an encoder for responses
// returned by the africastalking c2b_validation_notifier endpoint.
func EncodeC2bValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeC2bValidationNotifierRequest returns a decoder for requests sent to
// the africastalking c2b_validation_notifier endpoint.
func DecodeC2bValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body C2bValidationNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateC2bValidationNotifierRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewC2bValidationNotifierC2BValidationNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeB2cValidationNotifierResponse returns an encoder for responses
// returned by the africastalking b2c_validation_notifier endpoint.
func EncodeB2cValidationNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalking.B2CValidationNotificationResponse)
		enc := encoder(ctx, w)
		body := NewB2cValidationNotifierResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeB2cValidationNotifierRequest returns a decoder for requests sent to
// the africastalking b2c_validation_notifier endpoint.
func DecodeB2cValidationNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body B2cValidationNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewB2cValidationNotifierB2CValidationNotificationPayload(&body)

		return payload, nil
	}
}

// EncodeIotNotifierResponse returns an encoder for responses returned by the
// africastalking iot_notifier endpoint.
func EncodeIotNotifierResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeIotNotifierRequest returns a decoder for requests sent to the
// africastalking iot_notifier endpoint.
func DecodeIotNotifierRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body IotNotifierRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewIotNotifierIoTNotificationPayload(&body)

		return payload, nil
	}
}
