// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payments endpoints
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package payments

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "payments" service endpoints.
type Endpoints struct {
	PaymentNotifier endpoint.Endpoint
	C2bNotifier     endpoint.Endpoint
	B2cNotifier     endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "payments" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		PaymentNotifier: NewPaymentNotifierEndpoint(s),
		C2bNotifier:     NewC2bNotifierEndpoint(s),
		B2cNotifier:     NewB2cNotifierEndpoint(s),
	}
}

// Use applies the given middleware to all the "payments" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.PaymentNotifier = m(e.PaymentNotifier)
	e.C2bNotifier = m(e.C2bNotifier)
	e.B2cNotifier = m(e.B2cNotifier)
}

// NewPaymentNotifierEndpoint returns an endpoint function that calls the
// method "paymentNotifier" of service "payments".
func NewPaymentNotifierEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PaymentNotification)
		return s.PaymentNotifier(ctx, p)
	}
}

// NewC2bNotifierEndpoint returns an endpoint function that calls the method
// "c2bNotifier" of service "payments".
func NewC2bNotifierEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*C2BValidationNotification)
		return s.C2bNotifier(ctx, p)
	}
}

// NewB2cNotifierEndpoint returns an endpoint function that calls the method
// "b2cNotifier" of service "payments".
func NewB2cNotifierEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*B2CValidationNotificationPayload)
		return s.B2cNotifier(ctx, p)
	}
}
