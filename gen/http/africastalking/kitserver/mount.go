// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-notifiers/design

package server

import (
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// MountDeliveryReportNotifierHandler configures the mux to serve the
// "africastalking" service "delivery_report_notifier" endpoint.
func MountDeliveryReportNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/deliveryreport", f)
}

// MountIncomingMessageNotifierHandler configures the mux to serve the
// "africastalking" service "incoming_message_notifier" endpoint.
func MountIncomingMessageNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/incomingmessage", f)
}

// MountBulkOptOutNotifierHandler configures the mux to serve the
// "africastalking" service "bulk_optOut_notifier" endpoint.
func MountBulkOptOutNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/bulksmsoptout", f)
}

// MountSubNotifierHandler configures the mux to serve the "africastalking"
// service "sub_notifier" endpoint.
func MountSubNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/sms/subscription", f)
}

// MountVoiceNotifierHandler configures the mux to serve the "africastalking"
// service "voice_notifier" endpoint.
func MountVoiceNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/voice/notifications", f)
}

// MountTransferEventNotifierHandler configures the mux to serve the
// "africastalking" service "transfer_event_notifier" endpoint.
func MountTransferEventNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/voice/transferevents", f)
}

// MountUssdNotifierHandler configures the mux to serve the "africastalking"
// service "ussd_notifier" endpoint.
func MountUssdNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/ussd/sessions", f)
}

// MountValidationNotifierHandler configures the mux to serve the
// "africastalking" service "validation_notifier" endpoint.
func MountValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/airtime/validation", f)
}

// MountStatusNotifierHandler configures the mux to serve the "africastalking"
// service "status_notifier" endpoint.
func MountStatusNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/airtime/status", f)
}

// MountPaymentNotifierHandler configures the mux to serve the "africastalking"
// service "payment_notifier" endpoint.
func MountPaymentNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/events", f)
}

// MountC2bValidationNotifierHandler configures the mux to serve the
// "africastalking" service "c2b_validation_notifier" endpoint.
func MountC2bValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/c2b/validation", f)
}

// MountB2cValidationNotifierHandler configures the mux to serve the
// "africastalking" service "b2c_validation_notifier" endpoint.
func MountB2cValidationNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/payments/b2c/validation", f)
}

// MountIotNotifierHandler configures the mux to serve the "africastalking"
// service "iot_notifier" endpoint.
func MountIotNotifierHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callbacks/africastalking/iot/events", f)
}
